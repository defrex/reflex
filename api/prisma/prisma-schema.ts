// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateCheck {
  count: Int!
}

type AggregateComponent {
  count: Int!
}

type AggregateExample {
  count: Int!
}

type AggregateMembership {
  count: Int!
}

type AggregateRender {
  count: Int!
}

type AggregateRepo {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Check {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  githubCheckId: Int
  headBranch: String!
  headSha: String!
  renders(where: RenderWhereInput, orderBy: RenderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Render!]
  repo: Repo
}

type CheckConnection {
  pageInfo: PageInfo!
  edges: [CheckEdge]!
  aggregate: AggregateCheck!
}

input CheckCreateInput {
  githubCheckId: Int
  headBranch: String!
  headSha: String!
  renders: RenderCreateManyWithoutCheckInput
  repo: RepoCreateOneWithoutChecksInput
}

input CheckCreateManyWithoutRepoInput {
  create: [CheckCreateWithoutRepoInput!]
  connect: [CheckWhereUniqueInput!]
}

input CheckCreateOneWithoutRendersInput {
  create: CheckCreateWithoutRendersInput
  connect: CheckWhereUniqueInput
}

input CheckCreateWithoutRendersInput {
  githubCheckId: Int
  headBranch: String!
  headSha: String!
  repo: RepoCreateOneWithoutChecksInput
}

input CheckCreateWithoutRepoInput {
  githubCheckId: Int
  headBranch: String!
  headSha: String!
  renders: RenderCreateManyWithoutCheckInput
}

type CheckEdge {
  node: Check!
  cursor: String!
}

enum CheckOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  githubCheckId_ASC
  githubCheckId_DESC
  headBranch_ASC
  headBranch_DESC
  headSha_ASC
  headSha_DESC
}

type CheckPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  githubCheckId: Int
  headBranch: String!
  headSha: String!
}

input CheckScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  githubCheckId: Int
  githubCheckId_not: Int
  githubCheckId_in: [Int!]
  githubCheckId_not_in: [Int!]
  githubCheckId_lt: Int
  githubCheckId_lte: Int
  githubCheckId_gt: Int
  githubCheckId_gte: Int
  headBranch: String
  headBranch_not: String
  headBranch_in: [String!]
  headBranch_not_in: [String!]
  headBranch_lt: String
  headBranch_lte: String
  headBranch_gt: String
  headBranch_gte: String
  headBranch_contains: String
  headBranch_not_contains: String
  headBranch_starts_with: String
  headBranch_not_starts_with: String
  headBranch_ends_with: String
  headBranch_not_ends_with: String
  headSha: String
  headSha_not: String
  headSha_in: [String!]
  headSha_not_in: [String!]
  headSha_lt: String
  headSha_lte: String
  headSha_gt: String
  headSha_gte: String
  headSha_contains: String
  headSha_not_contains: String
  headSha_starts_with: String
  headSha_not_starts_with: String
  headSha_ends_with: String
  headSha_not_ends_with: String
  AND: [CheckScalarWhereInput!]
  OR: [CheckScalarWhereInput!]
  NOT: [CheckScalarWhereInput!]
}

type CheckSubscriptionPayload {
  mutation: MutationType!
  node: Check
  updatedFields: [String!]
  previousValues: CheckPreviousValues
}

input CheckSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CheckWhereInput
  AND: [CheckSubscriptionWhereInput!]
  OR: [CheckSubscriptionWhereInput!]
  NOT: [CheckSubscriptionWhereInput!]
}

input CheckUpdateInput {
  githubCheckId: Int
  headBranch: String
  headSha: String
  renders: RenderUpdateManyWithoutCheckInput
  repo: RepoUpdateOneWithoutChecksInput
}

input CheckUpdateManyDataInput {
  githubCheckId: Int
  headBranch: String
  headSha: String
}

input CheckUpdateManyMutationInput {
  githubCheckId: Int
  headBranch: String
  headSha: String
}

input CheckUpdateManyWithoutRepoInput {
  create: [CheckCreateWithoutRepoInput!]
  delete: [CheckWhereUniqueInput!]
  connect: [CheckWhereUniqueInput!]
  set: [CheckWhereUniqueInput!]
  disconnect: [CheckWhereUniqueInput!]
  update: [CheckUpdateWithWhereUniqueWithoutRepoInput!]
  upsert: [CheckUpsertWithWhereUniqueWithoutRepoInput!]
  deleteMany: [CheckScalarWhereInput!]
  updateMany: [CheckUpdateManyWithWhereNestedInput!]
}

input CheckUpdateManyWithWhereNestedInput {
  where: CheckScalarWhereInput!
  data: CheckUpdateManyDataInput!
}

input CheckUpdateOneWithoutRendersInput {
  create: CheckCreateWithoutRendersInput
  update: CheckUpdateWithoutRendersDataInput
  upsert: CheckUpsertWithoutRendersInput
  delete: Boolean
  disconnect: Boolean
  connect: CheckWhereUniqueInput
}

input CheckUpdateWithoutRendersDataInput {
  githubCheckId: Int
  headBranch: String
  headSha: String
  repo: RepoUpdateOneWithoutChecksInput
}

input CheckUpdateWithoutRepoDataInput {
  githubCheckId: Int
  headBranch: String
  headSha: String
  renders: RenderUpdateManyWithoutCheckInput
}

input CheckUpdateWithWhereUniqueWithoutRepoInput {
  where: CheckWhereUniqueInput!
  data: CheckUpdateWithoutRepoDataInput!
}

input CheckUpsertWithoutRendersInput {
  update: CheckUpdateWithoutRendersDataInput!
  create: CheckCreateWithoutRendersInput!
}

input CheckUpsertWithWhereUniqueWithoutRepoInput {
  where: CheckWhereUniqueInput!
  update: CheckUpdateWithoutRepoDataInput!
  create: CheckCreateWithoutRepoInput!
}

input CheckWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  githubCheckId: Int
  githubCheckId_not: Int
  githubCheckId_in: [Int!]
  githubCheckId_not_in: [Int!]
  githubCheckId_lt: Int
  githubCheckId_lte: Int
  githubCheckId_gt: Int
  githubCheckId_gte: Int
  headBranch: String
  headBranch_not: String
  headBranch_in: [String!]
  headBranch_not_in: [String!]
  headBranch_lt: String
  headBranch_lte: String
  headBranch_gt: String
  headBranch_gte: String
  headBranch_contains: String
  headBranch_not_contains: String
  headBranch_starts_with: String
  headBranch_not_starts_with: String
  headBranch_ends_with: String
  headBranch_not_ends_with: String
  headSha: String
  headSha_not: String
  headSha_in: [String!]
  headSha_not_in: [String!]
  headSha_lt: String
  headSha_lte: String
  headSha_gt: String
  headSha_gte: String
  headSha_contains: String
  headSha_not_contains: String
  headSha_starts_with: String
  headSha_not_starts_with: String
  headSha_ends_with: String
  headSha_not_ends_with: String
  renders_every: RenderWhereInput
  renders_some: RenderWhereInput
  renders_none: RenderWhereInput
  repo: RepoWhereInput
  AND: [CheckWhereInput!]
  OR: [CheckWhereInput!]
  NOT: [CheckWhereInput!]
}

input CheckWhereUniqueInput {
  id: ID
  githubCheckId: Int
}

type Component {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  team: Team!
  examples(where: ExampleWhereInput, orderBy: ExampleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Example!]
}

type ComponentConnection {
  pageInfo: PageInfo!
  edges: [ComponentEdge]!
  aggregate: AggregateComponent!
}

input ComponentCreateInput {
  name: String!
  team: TeamCreateOneWithoutComponentsInput!
  examples: ExampleCreateManyWithoutComponentInput
}

input ComponentCreateManyWithoutTeamInput {
  create: [ComponentCreateWithoutTeamInput!]
  connect: [ComponentWhereUniqueInput!]
}

input ComponentCreateOneWithoutExamplesInput {
  create: ComponentCreateWithoutExamplesInput
  connect: ComponentWhereUniqueInput
}

input ComponentCreateWithoutExamplesInput {
  name: String!
  team: TeamCreateOneWithoutComponentsInput!
}

input ComponentCreateWithoutTeamInput {
  name: String!
  examples: ExampleCreateManyWithoutComponentInput
}

type ComponentEdge {
  node: Component!
  cursor: String!
}

enum ComponentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type ComponentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

input ComponentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ComponentScalarWhereInput!]
  OR: [ComponentScalarWhereInput!]
  NOT: [ComponentScalarWhereInput!]
}

type ComponentSubscriptionPayload {
  mutation: MutationType!
  node: Component
  updatedFields: [String!]
  previousValues: ComponentPreviousValues
}

input ComponentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ComponentWhereInput
  AND: [ComponentSubscriptionWhereInput!]
  OR: [ComponentSubscriptionWhereInput!]
  NOT: [ComponentSubscriptionWhereInput!]
}

input ComponentUpdateInput {
  name: String
  team: TeamUpdateOneRequiredWithoutComponentsInput
  examples: ExampleUpdateManyWithoutComponentInput
}

input ComponentUpdateManyDataInput {
  name: String
}

input ComponentUpdateManyMutationInput {
  name: String
}

input ComponentUpdateManyWithoutTeamInput {
  create: [ComponentCreateWithoutTeamInput!]
  delete: [ComponentWhereUniqueInput!]
  connect: [ComponentWhereUniqueInput!]
  set: [ComponentWhereUniqueInput!]
  disconnect: [ComponentWhereUniqueInput!]
  update: [ComponentUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [ComponentUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [ComponentScalarWhereInput!]
  updateMany: [ComponentUpdateManyWithWhereNestedInput!]
}

input ComponentUpdateManyWithWhereNestedInput {
  where: ComponentScalarWhereInput!
  data: ComponentUpdateManyDataInput!
}

input ComponentUpdateOneRequiredWithoutExamplesInput {
  create: ComponentCreateWithoutExamplesInput
  update: ComponentUpdateWithoutExamplesDataInput
  upsert: ComponentUpsertWithoutExamplesInput
  connect: ComponentWhereUniqueInput
}

input ComponentUpdateWithoutExamplesDataInput {
  name: String
  team: TeamUpdateOneRequiredWithoutComponentsInput
}

input ComponentUpdateWithoutTeamDataInput {
  name: String
  examples: ExampleUpdateManyWithoutComponentInput
}

input ComponentUpdateWithWhereUniqueWithoutTeamInput {
  where: ComponentWhereUniqueInput!
  data: ComponentUpdateWithoutTeamDataInput!
}

input ComponentUpsertWithoutExamplesInput {
  update: ComponentUpdateWithoutExamplesDataInput!
  create: ComponentCreateWithoutExamplesInput!
}

input ComponentUpsertWithWhereUniqueWithoutTeamInput {
  where: ComponentWhereUniqueInput!
  update: ComponentUpdateWithoutTeamDataInput!
  create: ComponentCreateWithoutTeamInput!
}

input ComponentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  team: TeamWhereInput
  examples_every: ExampleWhereInput
  examples_some: ExampleWhereInput
  examples_none: ExampleWhereInput
  AND: [ComponentWhereInput!]
  OR: [ComponentWhereInput!]
  NOT: [ComponentWhereInput!]
}

input ComponentWhereUniqueInput {
  id: ID
}

scalar DateTime

type Example {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  component: Component!
  renders(where: RenderWhereInput, orderBy: RenderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Render!]
}

type ExampleConnection {
  pageInfo: PageInfo!
  edges: [ExampleEdge]!
  aggregate: AggregateExample!
}

input ExampleCreateInput {
  name: String!
  component: ComponentCreateOneWithoutExamplesInput!
  renders: RenderCreateManyWithoutExampleInput
}

input ExampleCreateManyWithoutComponentInput {
  create: [ExampleCreateWithoutComponentInput!]
  connect: [ExampleWhereUniqueInput!]
}

input ExampleCreateOneWithoutRendersInput {
  create: ExampleCreateWithoutRendersInput
  connect: ExampleWhereUniqueInput
}

input ExampleCreateWithoutComponentInput {
  name: String!
  renders: RenderCreateManyWithoutExampleInput
}

input ExampleCreateWithoutRendersInput {
  name: String!
  component: ComponentCreateOneWithoutExamplesInput!
}

type ExampleEdge {
  node: Example!
  cursor: String!
}

enum ExampleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type ExamplePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

input ExampleScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ExampleScalarWhereInput!]
  OR: [ExampleScalarWhereInput!]
  NOT: [ExampleScalarWhereInput!]
}

type ExampleSubscriptionPayload {
  mutation: MutationType!
  node: Example
  updatedFields: [String!]
  previousValues: ExamplePreviousValues
}

input ExampleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExampleWhereInput
  AND: [ExampleSubscriptionWhereInput!]
  OR: [ExampleSubscriptionWhereInput!]
  NOT: [ExampleSubscriptionWhereInput!]
}

input ExampleUpdateInput {
  name: String
  component: ComponentUpdateOneRequiredWithoutExamplesInput
  renders: RenderUpdateManyWithoutExampleInput
}

input ExampleUpdateManyDataInput {
  name: String
}

input ExampleUpdateManyMutationInput {
  name: String
}

input ExampleUpdateManyWithoutComponentInput {
  create: [ExampleCreateWithoutComponentInput!]
  delete: [ExampleWhereUniqueInput!]
  connect: [ExampleWhereUniqueInput!]
  set: [ExampleWhereUniqueInput!]
  disconnect: [ExampleWhereUniqueInput!]
  update: [ExampleUpdateWithWhereUniqueWithoutComponentInput!]
  upsert: [ExampleUpsertWithWhereUniqueWithoutComponentInput!]
  deleteMany: [ExampleScalarWhereInput!]
  updateMany: [ExampleUpdateManyWithWhereNestedInput!]
}

input ExampleUpdateManyWithWhereNestedInput {
  where: ExampleScalarWhereInput!
  data: ExampleUpdateManyDataInput!
}

input ExampleUpdateOneRequiredWithoutRendersInput {
  create: ExampleCreateWithoutRendersInput
  update: ExampleUpdateWithoutRendersDataInput
  upsert: ExampleUpsertWithoutRendersInput
  connect: ExampleWhereUniqueInput
}

input ExampleUpdateWithoutComponentDataInput {
  name: String
  renders: RenderUpdateManyWithoutExampleInput
}

input ExampleUpdateWithoutRendersDataInput {
  name: String
  component: ComponentUpdateOneRequiredWithoutExamplesInput
}

input ExampleUpdateWithWhereUniqueWithoutComponentInput {
  where: ExampleWhereUniqueInput!
  data: ExampleUpdateWithoutComponentDataInput!
}

input ExampleUpsertWithoutRendersInput {
  update: ExampleUpdateWithoutRendersDataInput!
  create: ExampleCreateWithoutRendersInput!
}

input ExampleUpsertWithWhereUniqueWithoutComponentInput {
  where: ExampleWhereUniqueInput!
  update: ExampleUpdateWithoutComponentDataInput!
  create: ExampleCreateWithoutComponentInput!
}

input ExampleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  component: ComponentWhereInput
  renders_every: RenderWhereInput
  renders_some: RenderWhereInput
  renders_none: RenderWhereInput
  AND: [ExampleWhereInput!]
  OR: [ExampleWhereInput!]
  NOT: [ExampleWhereInput!]
}

input ExampleWhereUniqueInput {
  id: ID
}

scalar Long

type Membership {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role!
  user: User!
  team: Team!
}

type MembershipConnection {
  pageInfo: PageInfo!
  edges: [MembershipEdge]!
  aggregate: AggregateMembership!
}

input MembershipCreateInput {
  role: Role
  user: UserCreateOneWithoutMembershipsInput!
  team: TeamCreateOneWithoutMembershipsInput!
}

input MembershipCreateManyWithoutTeamInput {
  create: [MembershipCreateWithoutTeamInput!]
  connect: [MembershipWhereUniqueInput!]
}

input MembershipCreateManyWithoutUserInput {
  create: [MembershipCreateWithoutUserInput!]
  connect: [MembershipWhereUniqueInput!]
}

input MembershipCreateWithoutTeamInput {
  role: Role
  user: UserCreateOneWithoutMembershipsInput!
}

input MembershipCreateWithoutUserInput {
  role: Role
  team: TeamCreateOneWithoutMembershipsInput!
}

type MembershipEdge {
  node: Membership!
  cursor: String!
}

enum MembershipOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  role_ASC
  role_DESC
}

type MembershipPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role!
}

input MembershipScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  AND: [MembershipScalarWhereInput!]
  OR: [MembershipScalarWhereInput!]
  NOT: [MembershipScalarWhereInput!]
}

type MembershipSubscriptionPayload {
  mutation: MutationType!
  node: Membership
  updatedFields: [String!]
  previousValues: MembershipPreviousValues
}

input MembershipSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MembershipWhereInput
  AND: [MembershipSubscriptionWhereInput!]
  OR: [MembershipSubscriptionWhereInput!]
  NOT: [MembershipSubscriptionWhereInput!]
}

input MembershipUpdateInput {
  role: Role
  user: UserUpdateOneRequiredWithoutMembershipsInput
  team: TeamUpdateOneRequiredWithoutMembershipsInput
}

input MembershipUpdateManyDataInput {
  role: Role
}

input MembershipUpdateManyMutationInput {
  role: Role
}

input MembershipUpdateManyWithoutTeamInput {
  create: [MembershipCreateWithoutTeamInput!]
  delete: [MembershipWhereUniqueInput!]
  connect: [MembershipWhereUniqueInput!]
  set: [MembershipWhereUniqueInput!]
  disconnect: [MembershipWhereUniqueInput!]
  update: [MembershipUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [MembershipUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [MembershipScalarWhereInput!]
  updateMany: [MembershipUpdateManyWithWhereNestedInput!]
}

input MembershipUpdateManyWithoutUserInput {
  create: [MembershipCreateWithoutUserInput!]
  delete: [MembershipWhereUniqueInput!]
  connect: [MembershipWhereUniqueInput!]
  set: [MembershipWhereUniqueInput!]
  disconnect: [MembershipWhereUniqueInput!]
  update: [MembershipUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [MembershipUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [MembershipScalarWhereInput!]
  updateMany: [MembershipUpdateManyWithWhereNestedInput!]
}

input MembershipUpdateManyWithWhereNestedInput {
  where: MembershipScalarWhereInput!
  data: MembershipUpdateManyDataInput!
}

input MembershipUpdateWithoutTeamDataInput {
  role: Role
  user: UserUpdateOneRequiredWithoutMembershipsInput
}

input MembershipUpdateWithoutUserDataInput {
  role: Role
  team: TeamUpdateOneRequiredWithoutMembershipsInput
}

input MembershipUpdateWithWhereUniqueWithoutTeamInput {
  where: MembershipWhereUniqueInput!
  data: MembershipUpdateWithoutTeamDataInput!
}

input MembershipUpdateWithWhereUniqueWithoutUserInput {
  where: MembershipWhereUniqueInput!
  data: MembershipUpdateWithoutUserDataInput!
}

input MembershipUpsertWithWhereUniqueWithoutTeamInput {
  where: MembershipWhereUniqueInput!
  update: MembershipUpdateWithoutTeamDataInput!
  create: MembershipCreateWithoutTeamInput!
}

input MembershipUpsertWithWhereUniqueWithoutUserInput {
  where: MembershipWhereUniqueInput!
  update: MembershipUpdateWithoutUserDataInput!
  create: MembershipCreateWithoutUserInput!
}

input MembershipWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  user: UserWhereInput
  team: TeamWhereInput
  AND: [MembershipWhereInput!]
  OR: [MembershipWhereInput!]
  NOT: [MembershipWhereInput!]
}

input MembershipWhereUniqueInput {
  id: ID
}

type Mutation {
  createCheck(data: CheckCreateInput!): Check!
  updateCheck(data: CheckUpdateInput!, where: CheckWhereUniqueInput!): Check
  updateManyChecks(data: CheckUpdateManyMutationInput!, where: CheckWhereInput): BatchPayload!
  upsertCheck(where: CheckWhereUniqueInput!, create: CheckCreateInput!, update: CheckUpdateInput!): Check!
  deleteCheck(where: CheckWhereUniqueInput!): Check
  deleteManyChecks(where: CheckWhereInput): BatchPayload!
  createComponent(data: ComponentCreateInput!): Component!
  updateComponent(data: ComponentUpdateInput!, where: ComponentWhereUniqueInput!): Component
  updateManyComponents(data: ComponentUpdateManyMutationInput!, where: ComponentWhereInput): BatchPayload!
  upsertComponent(where: ComponentWhereUniqueInput!, create: ComponentCreateInput!, update: ComponentUpdateInput!): Component!
  deleteComponent(where: ComponentWhereUniqueInput!): Component
  deleteManyComponents(where: ComponentWhereInput): BatchPayload!
  createExample(data: ExampleCreateInput!): Example!
  updateExample(data: ExampleUpdateInput!, where: ExampleWhereUniqueInput!): Example
  updateManyExamples(data: ExampleUpdateManyMutationInput!, where: ExampleWhereInput): BatchPayload!
  upsertExample(where: ExampleWhereUniqueInput!, create: ExampleCreateInput!, update: ExampleUpdateInput!): Example!
  deleteExample(where: ExampleWhereUniqueInput!): Example
  deleteManyExamples(where: ExampleWhereInput): BatchPayload!
  createMembership(data: MembershipCreateInput!): Membership!
  updateMembership(data: MembershipUpdateInput!, where: MembershipWhereUniqueInput!): Membership
  updateManyMemberships(data: MembershipUpdateManyMutationInput!, where: MembershipWhereInput): BatchPayload!
  upsertMembership(where: MembershipWhereUniqueInput!, create: MembershipCreateInput!, update: MembershipUpdateInput!): Membership!
  deleteMembership(where: MembershipWhereUniqueInput!): Membership
  deleteManyMemberships(where: MembershipWhereInput): BatchPayload!
  createRender(data: RenderCreateInput!): Render!
  updateRender(data: RenderUpdateInput!, where: RenderWhereUniqueInput!): Render
  updateManyRenders(data: RenderUpdateManyMutationInput!, where: RenderWhereInput): BatchPayload!
  upsertRender(where: RenderWhereUniqueInput!, create: RenderCreateInput!, update: RenderUpdateInput!): Render!
  deleteRender(where: RenderWhereUniqueInput!): Render
  deleteManyRenders(where: RenderWhereInput): BatchPayload!
  createRepo(data: RepoCreateInput!): Repo!
  updateRepo(data: RepoUpdateInput!, where: RepoWhereUniqueInput!): Repo
  updateManyRepoes(data: RepoUpdateManyMutationInput!, where: RepoWhereInput): BatchPayload!
  upsertRepo(where: RepoWhereUniqueInput!, create: RepoCreateInput!, update: RepoUpdateInput!): Repo!
  deleteRepo(where: RepoWhereUniqueInput!): Repo
  deleteManyRepoes(where: RepoWhereInput): BatchPayload!
  createTeam(data: TeamCreateInput!): Team!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  check(where: CheckWhereUniqueInput!): Check
  checks(where: CheckWhereInput, orderBy: CheckOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Check]!
  checksConnection(where: CheckWhereInput, orderBy: CheckOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CheckConnection!
  component(where: ComponentWhereUniqueInput!): Component
  components(where: ComponentWhereInput, orderBy: ComponentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Component]!
  componentsConnection(where: ComponentWhereInput, orderBy: ComponentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ComponentConnection!
  example(where: ExampleWhereUniqueInput!): Example
  examples(where: ExampleWhereInput, orderBy: ExampleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Example]!
  examplesConnection(where: ExampleWhereInput, orderBy: ExampleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExampleConnection!
  membership(where: MembershipWhereUniqueInput!): Membership
  memberships(where: MembershipWhereInput, orderBy: MembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Membership]!
  membershipsConnection(where: MembershipWhereInput, orderBy: MembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MembershipConnection!
  render(where: RenderWhereUniqueInput!): Render
  renders(where: RenderWhereInput, orderBy: RenderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Render]!
  rendersConnection(where: RenderWhereInput, orderBy: RenderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RenderConnection!
  repo(where: RepoWhereUniqueInput!): Repo
  repoes(where: RepoWhereInput, orderBy: RepoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Repo]!
  repoesConnection(where: RepoWhereInput, orderBy: RepoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RepoConnection!
  team(where: TeamWhereUniqueInput!): Team
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Render {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  imageUrl: String!
  example: Example!
  check: Check
}

type RenderConnection {
  pageInfo: PageInfo!
  edges: [RenderEdge]!
  aggregate: AggregateRender!
}

input RenderCreateInput {
  imageUrl: String!
  example: ExampleCreateOneWithoutRendersInput!
  check: CheckCreateOneWithoutRendersInput
}

input RenderCreateManyWithoutCheckInput {
  create: [RenderCreateWithoutCheckInput!]
  connect: [RenderWhereUniqueInput!]
}

input RenderCreateManyWithoutExampleInput {
  create: [RenderCreateWithoutExampleInput!]
  connect: [RenderWhereUniqueInput!]
}

input RenderCreateWithoutCheckInput {
  imageUrl: String!
  example: ExampleCreateOneWithoutRendersInput!
}

input RenderCreateWithoutExampleInput {
  imageUrl: String!
  check: CheckCreateOneWithoutRendersInput
}

type RenderEdge {
  node: Render!
  cursor: String!
}

enum RenderOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  imageUrl_ASC
  imageUrl_DESC
}

type RenderPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  imageUrl: String!
}

input RenderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  AND: [RenderScalarWhereInput!]
  OR: [RenderScalarWhereInput!]
  NOT: [RenderScalarWhereInput!]
}

type RenderSubscriptionPayload {
  mutation: MutationType!
  node: Render
  updatedFields: [String!]
  previousValues: RenderPreviousValues
}

input RenderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RenderWhereInput
  AND: [RenderSubscriptionWhereInput!]
  OR: [RenderSubscriptionWhereInput!]
  NOT: [RenderSubscriptionWhereInput!]
}

input RenderUpdateInput {
  imageUrl: String
  example: ExampleUpdateOneRequiredWithoutRendersInput
  check: CheckUpdateOneWithoutRendersInput
}

input RenderUpdateManyDataInput {
  imageUrl: String
}

input RenderUpdateManyMutationInput {
  imageUrl: String
}

input RenderUpdateManyWithoutCheckInput {
  create: [RenderCreateWithoutCheckInput!]
  delete: [RenderWhereUniqueInput!]
  connect: [RenderWhereUniqueInput!]
  set: [RenderWhereUniqueInput!]
  disconnect: [RenderWhereUniqueInput!]
  update: [RenderUpdateWithWhereUniqueWithoutCheckInput!]
  upsert: [RenderUpsertWithWhereUniqueWithoutCheckInput!]
  deleteMany: [RenderScalarWhereInput!]
  updateMany: [RenderUpdateManyWithWhereNestedInput!]
}

input RenderUpdateManyWithoutExampleInput {
  create: [RenderCreateWithoutExampleInput!]
  delete: [RenderWhereUniqueInput!]
  connect: [RenderWhereUniqueInput!]
  set: [RenderWhereUniqueInput!]
  disconnect: [RenderWhereUniqueInput!]
  update: [RenderUpdateWithWhereUniqueWithoutExampleInput!]
  upsert: [RenderUpsertWithWhereUniqueWithoutExampleInput!]
  deleteMany: [RenderScalarWhereInput!]
  updateMany: [RenderUpdateManyWithWhereNestedInput!]
}

input RenderUpdateManyWithWhereNestedInput {
  where: RenderScalarWhereInput!
  data: RenderUpdateManyDataInput!
}

input RenderUpdateWithoutCheckDataInput {
  imageUrl: String
  example: ExampleUpdateOneRequiredWithoutRendersInput
}

input RenderUpdateWithoutExampleDataInput {
  imageUrl: String
  check: CheckUpdateOneWithoutRendersInput
}

input RenderUpdateWithWhereUniqueWithoutCheckInput {
  where: RenderWhereUniqueInput!
  data: RenderUpdateWithoutCheckDataInput!
}

input RenderUpdateWithWhereUniqueWithoutExampleInput {
  where: RenderWhereUniqueInput!
  data: RenderUpdateWithoutExampleDataInput!
}

input RenderUpsertWithWhereUniqueWithoutCheckInput {
  where: RenderWhereUniqueInput!
  update: RenderUpdateWithoutCheckDataInput!
  create: RenderCreateWithoutCheckInput!
}

input RenderUpsertWithWhereUniqueWithoutExampleInput {
  where: RenderWhereUniqueInput!
  update: RenderUpdateWithoutExampleDataInput!
  create: RenderCreateWithoutExampleInput!
}

input RenderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  example: ExampleWhereInput
  check: CheckWhereInput
  AND: [RenderWhereInput!]
  OR: [RenderWhereInput!]
  NOT: [RenderWhereInput!]
}

input RenderWhereUniqueInput {
  id: ID
}

type Repo {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: String!
  name: String!
  checks(where: CheckWhereInput, orderBy: CheckOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Check!]
  team: Team
}

type RepoConnection {
  pageInfo: PageInfo!
  edges: [RepoEdge]!
  aggregate: AggregateRepo!
}

input RepoCreateInput {
  owner: String!
  name: String!
  checks: CheckCreateManyWithoutRepoInput
  team: TeamCreateOneWithoutReposInput
}

input RepoCreateManyWithoutTeamInput {
  create: [RepoCreateWithoutTeamInput!]
  connect: [RepoWhereUniqueInput!]
}

input RepoCreateOneWithoutChecksInput {
  create: RepoCreateWithoutChecksInput
  connect: RepoWhereUniqueInput
}

input RepoCreateWithoutChecksInput {
  owner: String!
  name: String!
  team: TeamCreateOneWithoutReposInput
}

input RepoCreateWithoutTeamInput {
  owner: String!
  name: String!
  checks: CheckCreateManyWithoutRepoInput
}

type RepoEdge {
  node: Repo!
  cursor: String!
}

enum RepoOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  owner_ASC
  owner_DESC
  name_ASC
  name_DESC
}

type RepoPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: String!
  name: String!
}

input RepoScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  owner: String
  owner_not: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_gt: String
  owner_gte: String
  owner_contains: String
  owner_not_contains: String
  owner_starts_with: String
  owner_not_starts_with: String
  owner_ends_with: String
  owner_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [RepoScalarWhereInput!]
  OR: [RepoScalarWhereInput!]
  NOT: [RepoScalarWhereInput!]
}

type RepoSubscriptionPayload {
  mutation: MutationType!
  node: Repo
  updatedFields: [String!]
  previousValues: RepoPreviousValues
}

input RepoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RepoWhereInput
  AND: [RepoSubscriptionWhereInput!]
  OR: [RepoSubscriptionWhereInput!]
  NOT: [RepoSubscriptionWhereInput!]
}

input RepoUpdateInput {
  owner: String
  name: String
  checks: CheckUpdateManyWithoutRepoInput
  team: TeamUpdateOneWithoutReposInput
}

input RepoUpdateManyDataInput {
  owner: String
  name: String
}

input RepoUpdateManyMutationInput {
  owner: String
  name: String
}

input RepoUpdateManyWithoutTeamInput {
  create: [RepoCreateWithoutTeamInput!]
  delete: [RepoWhereUniqueInput!]
  connect: [RepoWhereUniqueInput!]
  set: [RepoWhereUniqueInput!]
  disconnect: [RepoWhereUniqueInput!]
  update: [RepoUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [RepoUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [RepoScalarWhereInput!]
  updateMany: [RepoUpdateManyWithWhereNestedInput!]
}

input RepoUpdateManyWithWhereNestedInput {
  where: RepoScalarWhereInput!
  data: RepoUpdateManyDataInput!
}

input RepoUpdateOneWithoutChecksInput {
  create: RepoCreateWithoutChecksInput
  update: RepoUpdateWithoutChecksDataInput
  upsert: RepoUpsertWithoutChecksInput
  delete: Boolean
  disconnect: Boolean
  connect: RepoWhereUniqueInput
}

input RepoUpdateWithoutChecksDataInput {
  owner: String
  name: String
  team: TeamUpdateOneWithoutReposInput
}

input RepoUpdateWithoutTeamDataInput {
  owner: String
  name: String
  checks: CheckUpdateManyWithoutRepoInput
}

input RepoUpdateWithWhereUniqueWithoutTeamInput {
  where: RepoWhereUniqueInput!
  data: RepoUpdateWithoutTeamDataInput!
}

input RepoUpsertWithoutChecksInput {
  update: RepoUpdateWithoutChecksDataInput!
  create: RepoCreateWithoutChecksInput!
}

input RepoUpsertWithWhereUniqueWithoutTeamInput {
  where: RepoWhereUniqueInput!
  update: RepoUpdateWithoutTeamDataInput!
  create: RepoCreateWithoutTeamInput!
}

input RepoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  owner: String
  owner_not: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_gt: String
  owner_gte: String
  owner_contains: String
  owner_not_contains: String
  owner_starts_with: String
  owner_not_starts_with: String
  owner_ends_with: String
  owner_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  checks_every: CheckWhereInput
  checks_some: CheckWhereInput
  checks_none: CheckWhereInput
  team: TeamWhereInput
  AND: [RepoWhereInput!]
  OR: [RepoWhereInput!]
  NOT: [RepoWhereInput!]
}

input RepoWhereUniqueInput {
  id: ID
}

enum Role {
  MEMBER
  ADMIN
}

type Subscription {
  check(where: CheckSubscriptionWhereInput): CheckSubscriptionPayload
  component(where: ComponentSubscriptionWhereInput): ComponentSubscriptionPayload
  example(where: ExampleSubscriptionWhereInput): ExampleSubscriptionPayload
  membership(where: MembershipSubscriptionWhereInput): MembershipSubscriptionPayload
  render(where: RenderSubscriptionWhereInput): RenderSubscriptionPayload
  repo(where: RepoSubscriptionWhereInput): RepoSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Team {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  memberships(where: MembershipWhereInput, orderBy: MembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Membership!]
  components(where: ComponentWhereInput, orderBy: ComponentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Component!]
  repos(where: RepoWhereInput, orderBy: RepoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Repo!]
}

type TeamConnection {
  pageInfo: PageInfo!
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  name: String!
  memberships: MembershipCreateManyWithoutTeamInput
  components: ComponentCreateManyWithoutTeamInput
  repos: RepoCreateManyWithoutTeamInput
}

input TeamCreateOneWithoutComponentsInput {
  create: TeamCreateWithoutComponentsInput
  connect: TeamWhereUniqueInput
}

input TeamCreateOneWithoutMembershipsInput {
  create: TeamCreateWithoutMembershipsInput
  connect: TeamWhereUniqueInput
}

input TeamCreateOneWithoutReposInput {
  create: TeamCreateWithoutReposInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutComponentsInput {
  name: String!
  memberships: MembershipCreateManyWithoutTeamInput
  repos: RepoCreateManyWithoutTeamInput
}

input TeamCreateWithoutMembershipsInput {
  name: String!
  components: ComponentCreateManyWithoutTeamInput
  repos: RepoCreateManyWithoutTeamInput
}

input TeamCreateWithoutReposInput {
  name: String!
  memberships: MembershipCreateManyWithoutTeamInput
  components: ComponentCreateManyWithoutTeamInput
}

type TeamEdge {
  node: Team!
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type TeamPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
  AND: [TeamSubscriptionWhereInput!]
  OR: [TeamSubscriptionWhereInput!]
  NOT: [TeamSubscriptionWhereInput!]
}

input TeamUpdateInput {
  name: String
  memberships: MembershipUpdateManyWithoutTeamInput
  components: ComponentUpdateManyWithoutTeamInput
  repos: RepoUpdateManyWithoutTeamInput
}

input TeamUpdateManyMutationInput {
  name: String
}

input TeamUpdateOneRequiredWithoutComponentsInput {
  create: TeamCreateWithoutComponentsInput
  update: TeamUpdateWithoutComponentsDataInput
  upsert: TeamUpsertWithoutComponentsInput
  connect: TeamWhereUniqueInput
}

input TeamUpdateOneRequiredWithoutMembershipsInput {
  create: TeamCreateWithoutMembershipsInput
  update: TeamUpdateWithoutMembershipsDataInput
  upsert: TeamUpsertWithoutMembershipsInput
  connect: TeamWhereUniqueInput
}

input TeamUpdateOneWithoutReposInput {
  create: TeamCreateWithoutReposInput
  update: TeamUpdateWithoutReposDataInput
  upsert: TeamUpsertWithoutReposInput
  delete: Boolean
  disconnect: Boolean
  connect: TeamWhereUniqueInput
}

input TeamUpdateWithoutComponentsDataInput {
  name: String
  memberships: MembershipUpdateManyWithoutTeamInput
  repos: RepoUpdateManyWithoutTeamInput
}

input TeamUpdateWithoutMembershipsDataInput {
  name: String
  components: ComponentUpdateManyWithoutTeamInput
  repos: RepoUpdateManyWithoutTeamInput
}

input TeamUpdateWithoutReposDataInput {
  name: String
  memberships: MembershipUpdateManyWithoutTeamInput
  components: ComponentUpdateManyWithoutTeamInput
}

input TeamUpsertWithoutComponentsInput {
  update: TeamUpdateWithoutComponentsDataInput!
  create: TeamCreateWithoutComponentsInput!
}

input TeamUpsertWithoutMembershipsInput {
  update: TeamUpdateWithoutMembershipsDataInput!
  create: TeamCreateWithoutMembershipsInput!
}

input TeamUpsertWithoutReposInput {
  update: TeamUpdateWithoutReposDataInput!
  create: TeamCreateWithoutReposInput!
}

input TeamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  memberships_every: MembershipWhereInput
  memberships_some: MembershipWhereInput
  memberships_none: MembershipWhereInput
  components_every: ComponentWhereInput
  components_some: ComponentWhereInput
  components_none: ComponentWhereInput
  repos_every: RepoWhereInput
  repos_some: RepoWhereInput
  repos_none: RepoWhereInput
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
}

input TeamWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String!
  githubAccessToken: String
  figmaAccessToken: String
  figmaRefreshToken: String
  memberships(where: MembershipWhereInput, orderBy: MembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Membership!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  name: String!
  githubAccessToken: String
  figmaAccessToken: String
  figmaRefreshToken: String
  memberships: MembershipCreateManyWithoutUserInput
}

input UserCreateOneWithoutMembershipsInput {
  create: UserCreateWithoutMembershipsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutMembershipsInput {
  email: String!
  name: String!
  githubAccessToken: String
  figmaAccessToken: String
  figmaRefreshToken: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  githubAccessToken_ASC
  githubAccessToken_DESC
  figmaAccessToken_ASC
  figmaAccessToken_DESC
  figmaRefreshToken_ASC
  figmaRefreshToken_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String!
  githubAccessToken: String
  figmaAccessToken: String
  figmaRefreshToken: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  name: String
  githubAccessToken: String
  figmaAccessToken: String
  figmaRefreshToken: String
  memberships: MembershipUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  githubAccessToken: String
  figmaAccessToken: String
  figmaRefreshToken: String
}

input UserUpdateOneRequiredWithoutMembershipsInput {
  create: UserCreateWithoutMembershipsInput
  update: UserUpdateWithoutMembershipsDataInput
  upsert: UserUpsertWithoutMembershipsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutMembershipsDataInput {
  email: String
  name: String
  githubAccessToken: String
  figmaAccessToken: String
  figmaRefreshToken: String
}

input UserUpsertWithoutMembershipsInput {
  update: UserUpdateWithoutMembershipsDataInput!
  create: UserCreateWithoutMembershipsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  githubAccessToken: String
  githubAccessToken_not: String
  githubAccessToken_in: [String!]
  githubAccessToken_not_in: [String!]
  githubAccessToken_lt: String
  githubAccessToken_lte: String
  githubAccessToken_gt: String
  githubAccessToken_gte: String
  githubAccessToken_contains: String
  githubAccessToken_not_contains: String
  githubAccessToken_starts_with: String
  githubAccessToken_not_starts_with: String
  githubAccessToken_ends_with: String
  githubAccessToken_not_ends_with: String
  figmaAccessToken: String
  figmaAccessToken_not: String
  figmaAccessToken_in: [String!]
  figmaAccessToken_not_in: [String!]
  figmaAccessToken_lt: String
  figmaAccessToken_lte: String
  figmaAccessToken_gt: String
  figmaAccessToken_gte: String
  figmaAccessToken_contains: String
  figmaAccessToken_not_contains: String
  figmaAccessToken_starts_with: String
  figmaAccessToken_not_starts_with: String
  figmaAccessToken_ends_with: String
  figmaAccessToken_not_ends_with: String
  figmaRefreshToken: String
  figmaRefreshToken_not: String
  figmaRefreshToken_in: [String!]
  figmaRefreshToken_not_in: [String!]
  figmaRefreshToken_lt: String
  figmaRefreshToken_lte: String
  figmaRefreshToken_gt: String
  figmaRefreshToken_gte: String
  figmaRefreshToken_contains: String
  figmaRefreshToken_not_contains: String
  figmaRefreshToken_starts_with: String
  figmaRefreshToken_not_starts_with: String
  figmaRefreshToken_ends_with: String
  figmaRefreshToken_not_ends_with: String
  memberships_every: MembershipWhereInput
  memberships_some: MembershipWhereInput
  memberships_none: MembershipWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
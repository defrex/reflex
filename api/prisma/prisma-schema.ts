// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateMembership {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Membership {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role!
  user: User!
  team: Team!
}

type MembershipConnection {
  pageInfo: PageInfo!
  edges: [MembershipEdge]!
  aggregate: AggregateMembership!
}

input MembershipCreateInput {
  role: Role
  user: UserCreateOneWithoutMembershipsInput!
  team: TeamCreateOneWithoutMembershipsInput!
}

input MembershipCreateManyWithoutTeamInput {
  create: [MembershipCreateWithoutTeamInput!]
  connect: [MembershipWhereUniqueInput!]
}

input MembershipCreateManyWithoutUserInput {
  create: [MembershipCreateWithoutUserInput!]
  connect: [MembershipWhereUniqueInput!]
}

input MembershipCreateWithoutTeamInput {
  role: Role
  user: UserCreateOneWithoutMembershipsInput!
}

input MembershipCreateWithoutUserInput {
  role: Role
  team: TeamCreateOneWithoutMembershipsInput!
}

type MembershipEdge {
  node: Membership!
  cursor: String!
}

enum MembershipOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  role_ASC
  role_DESC
}

type MembershipPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role!
}

input MembershipScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  AND: [MembershipScalarWhereInput!]
  OR: [MembershipScalarWhereInput!]
  NOT: [MembershipScalarWhereInput!]
}

type MembershipSubscriptionPayload {
  mutation: MutationType!
  node: Membership
  updatedFields: [String!]
  previousValues: MembershipPreviousValues
}

input MembershipSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MembershipWhereInput
  AND: [MembershipSubscriptionWhereInput!]
  OR: [MembershipSubscriptionWhereInput!]
  NOT: [MembershipSubscriptionWhereInput!]
}

input MembershipUpdateInput {
  role: Role
  user: UserUpdateOneRequiredWithoutMembershipsInput
  team: TeamUpdateOneRequiredWithoutMembershipsInput
}

input MembershipUpdateManyDataInput {
  role: Role
}

input MembershipUpdateManyMutationInput {
  role: Role
}

input MembershipUpdateManyWithoutTeamInput {
  create: [MembershipCreateWithoutTeamInput!]
  delete: [MembershipWhereUniqueInput!]
  connect: [MembershipWhereUniqueInput!]
  set: [MembershipWhereUniqueInput!]
  disconnect: [MembershipWhereUniqueInput!]
  update: [MembershipUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [MembershipUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [MembershipScalarWhereInput!]
  updateMany: [MembershipUpdateManyWithWhereNestedInput!]
}

input MembershipUpdateManyWithoutUserInput {
  create: [MembershipCreateWithoutUserInput!]
  delete: [MembershipWhereUniqueInput!]
  connect: [MembershipWhereUniqueInput!]
  set: [MembershipWhereUniqueInput!]
  disconnect: [MembershipWhereUniqueInput!]
  update: [MembershipUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [MembershipUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [MembershipScalarWhereInput!]
  updateMany: [MembershipUpdateManyWithWhereNestedInput!]
}

input MembershipUpdateManyWithWhereNestedInput {
  where: MembershipScalarWhereInput!
  data: MembershipUpdateManyDataInput!
}

input MembershipUpdateWithoutTeamDataInput {
  role: Role
  user: UserUpdateOneRequiredWithoutMembershipsInput
}

input MembershipUpdateWithoutUserDataInput {
  role: Role
  team: TeamUpdateOneRequiredWithoutMembershipsInput
}

input MembershipUpdateWithWhereUniqueWithoutTeamInput {
  where: MembershipWhereUniqueInput!
  data: MembershipUpdateWithoutTeamDataInput!
}

input MembershipUpdateWithWhereUniqueWithoutUserInput {
  where: MembershipWhereUniqueInput!
  data: MembershipUpdateWithoutUserDataInput!
}

input MembershipUpsertWithWhereUniqueWithoutTeamInput {
  where: MembershipWhereUniqueInput!
  update: MembershipUpdateWithoutTeamDataInput!
  create: MembershipCreateWithoutTeamInput!
}

input MembershipUpsertWithWhereUniqueWithoutUserInput {
  where: MembershipWhereUniqueInput!
  update: MembershipUpdateWithoutUserDataInput!
  create: MembershipCreateWithoutUserInput!
}

input MembershipWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  user: UserWhereInput
  team: TeamWhereInput
  AND: [MembershipWhereInput!]
  OR: [MembershipWhereInput!]
  NOT: [MembershipWhereInput!]
}

input MembershipWhereUniqueInput {
  id: ID
}

type Mutation {
  createMembership(data: MembershipCreateInput!): Membership!
  updateMembership(data: MembershipUpdateInput!, where: MembershipWhereUniqueInput!): Membership
  updateManyMemberships(data: MembershipUpdateManyMutationInput!, where: MembershipWhereInput): BatchPayload!
  upsertMembership(where: MembershipWhereUniqueInput!, create: MembershipCreateInput!, update: MembershipUpdateInput!): Membership!
  deleteMembership(where: MembershipWhereUniqueInput!): Membership
  deleteManyMemberships(where: MembershipWhereInput): BatchPayload!
  createTeam(data: TeamCreateInput!): Team!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  membership(where: MembershipWhereUniqueInput!): Membership
  memberships(where: MembershipWhereInput, orderBy: MembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Membership]!
  membershipsConnection(where: MembershipWhereInput, orderBy: MembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MembershipConnection!
  team(where: TeamWhereUniqueInput!): Team
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Role {
  MEMBER
  ADMIN
}

type Subscription {
  membership(where: MembershipSubscriptionWhereInput): MembershipSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Team {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  memberships(where: MembershipWhereInput, orderBy: MembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Membership!]
}

type TeamConnection {
  pageInfo: PageInfo!
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  name: String!
  memberships: MembershipCreateManyWithoutTeamInput
}

input TeamCreateOneWithoutMembershipsInput {
  create: TeamCreateWithoutMembershipsInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutMembershipsInput {
  name: String!
}

type TeamEdge {
  node: Team!
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type TeamPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
  AND: [TeamSubscriptionWhereInput!]
  OR: [TeamSubscriptionWhereInput!]
  NOT: [TeamSubscriptionWhereInput!]
}

input TeamUpdateInput {
  name: String
  memberships: MembershipUpdateManyWithoutTeamInput
}

input TeamUpdateManyMutationInput {
  name: String
}

input TeamUpdateOneRequiredWithoutMembershipsInput {
  create: TeamCreateWithoutMembershipsInput
  update: TeamUpdateWithoutMembershipsDataInput
  upsert: TeamUpsertWithoutMembershipsInput
  connect: TeamWhereUniqueInput
}

input TeamUpdateWithoutMembershipsDataInput {
  name: String
}

input TeamUpsertWithoutMembershipsInput {
  update: TeamUpdateWithoutMembershipsDataInput!
  create: TeamCreateWithoutMembershipsInput!
}

input TeamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  memberships_every: MembershipWhereInput
  memberships_some: MembershipWhereInput
  memberships_none: MembershipWhereInput
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
}

input TeamWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String!
  githubAccessToken: String
  figmaAccessToken: String
  figmaRefreshToken: String
  memberships(where: MembershipWhereInput, orderBy: MembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Membership!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  name: String!
  githubAccessToken: String
  figmaAccessToken: String
  figmaRefreshToken: String
  memberships: MembershipCreateManyWithoutUserInput
}

input UserCreateOneWithoutMembershipsInput {
  create: UserCreateWithoutMembershipsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutMembershipsInput {
  email: String!
  name: String!
  githubAccessToken: String
  figmaAccessToken: String
  figmaRefreshToken: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  githubAccessToken_ASC
  githubAccessToken_DESC
  figmaAccessToken_ASC
  figmaAccessToken_DESC
  figmaRefreshToken_ASC
  figmaRefreshToken_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String!
  githubAccessToken: String
  figmaAccessToken: String
  figmaRefreshToken: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  name: String
  githubAccessToken: String
  figmaAccessToken: String
  figmaRefreshToken: String
  memberships: MembershipUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  githubAccessToken: String
  figmaAccessToken: String
  figmaRefreshToken: String
}

input UserUpdateOneRequiredWithoutMembershipsInput {
  create: UserCreateWithoutMembershipsInput
  update: UserUpdateWithoutMembershipsDataInput
  upsert: UserUpsertWithoutMembershipsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutMembershipsDataInput {
  email: String
  name: String
  githubAccessToken: String
  figmaAccessToken: String
  figmaRefreshToken: String
}

input UserUpsertWithoutMembershipsInput {
  update: UserUpdateWithoutMembershipsDataInput!
  create: UserCreateWithoutMembershipsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  githubAccessToken: String
  githubAccessToken_not: String
  githubAccessToken_in: [String!]
  githubAccessToken_not_in: [String!]
  githubAccessToken_lt: String
  githubAccessToken_lte: String
  githubAccessToken_gt: String
  githubAccessToken_gte: String
  githubAccessToken_contains: String
  githubAccessToken_not_contains: String
  githubAccessToken_starts_with: String
  githubAccessToken_not_starts_with: String
  githubAccessToken_ends_with: String
  githubAccessToken_not_ends_with: String
  figmaAccessToken: String
  figmaAccessToken_not: String
  figmaAccessToken_in: [String!]
  figmaAccessToken_not_in: [String!]
  figmaAccessToken_lt: String
  figmaAccessToken_lte: String
  figmaAccessToken_gt: String
  figmaAccessToken_gte: String
  figmaAccessToken_contains: String
  figmaAccessToken_not_contains: String
  figmaAccessToken_starts_with: String
  figmaAccessToken_not_starts_with: String
  figmaAccessToken_ends_with: String
  figmaAccessToken_not_ends_with: String
  figmaRefreshToken: String
  figmaRefreshToken_not: String
  figmaRefreshToken_in: [String!]
  figmaRefreshToken_not_in: [String!]
  figmaRefreshToken_lt: String
  figmaRefreshToken_lte: String
  figmaRefreshToken_gt: String
  figmaRefreshToken_gte: String
  figmaRefreshToken_contains: String
  figmaRefreshToken_not_contains: String
  figmaRefreshToken_starts_with: String
  figmaRefreshToken_not_starts_with: String
  figmaRefreshToken_ends_with: String
  figmaRefreshToken_not_ends_with: String
  memberships_every: MembershipWhereInput
  memberships_some: MembershipWhereInput
  memberships_none: MembershipWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
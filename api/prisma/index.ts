// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  check: (where?: CheckWhereInput) => Promise<boolean>;
  cliAuthSession: (where?: CliAuthSessionWhereInput) => Promise<boolean>;
  component: (where?: ComponentWhereInput) => Promise<boolean>;
  example: (where?: ExampleWhereInput) => Promise<boolean>;
  membership: (where?: MembershipWhereInput) => Promise<boolean>;
  render: (where?: RenderWhereInput) => Promise<boolean>;
  repo: (where?: RepoWhereInput) => Promise<boolean>;
  team: (where?: TeamWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  check: (where: CheckWhereUniqueInput) => CheckPromise;
  checks: (
    args?: {
      where?: CheckWhereInput;
      orderBy?: CheckOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Check>;
  checksConnection: (
    args?: {
      where?: CheckWhereInput;
      orderBy?: CheckOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CheckConnectionPromise;
  cliAuthSession: (
    where: CliAuthSessionWhereUniqueInput
  ) => CliAuthSessionPromise;
  cliAuthSessions: (
    args?: {
      where?: CliAuthSessionWhereInput;
      orderBy?: CliAuthSessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CliAuthSession>;
  cliAuthSessionsConnection: (
    args?: {
      where?: CliAuthSessionWhereInput;
      orderBy?: CliAuthSessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CliAuthSessionConnectionPromise;
  component: (where: ComponentWhereUniqueInput) => ComponentPromise;
  components: (
    args?: {
      where?: ComponentWhereInput;
      orderBy?: ComponentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Component>;
  componentsConnection: (
    args?: {
      where?: ComponentWhereInput;
      orderBy?: ComponentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ComponentConnectionPromise;
  example: (where: ExampleWhereUniqueInput) => ExamplePromise;
  examples: (
    args?: {
      where?: ExampleWhereInput;
      orderBy?: ExampleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Example>;
  examplesConnection: (
    args?: {
      where?: ExampleWhereInput;
      orderBy?: ExampleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ExampleConnectionPromise;
  membership: (where: MembershipWhereUniqueInput) => MembershipPromise;
  memberships: (
    args?: {
      where?: MembershipWhereInput;
      orderBy?: MembershipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Membership>;
  membershipsConnection: (
    args?: {
      where?: MembershipWhereInput;
      orderBy?: MembershipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MembershipConnectionPromise;
  render: (where: RenderWhereUniqueInput) => RenderPromise;
  renders: (
    args?: {
      where?: RenderWhereInput;
      orderBy?: RenderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Render>;
  rendersConnection: (
    args?: {
      where?: RenderWhereInput;
      orderBy?: RenderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RenderConnectionPromise;
  repo: (where: RepoWhereUniqueInput) => RepoPromise;
  repoes: (
    args?: {
      where?: RepoWhereInput;
      orderBy?: RepoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Repo>;
  repoesConnection: (
    args?: {
      where?: RepoWhereInput;
      orderBy?: RepoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RepoConnectionPromise;
  team: (where: TeamWhereUniqueInput) => TeamPromise;
  teams: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Team>;
  teamsConnection: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TeamConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCheck: (data: CheckCreateInput) => CheckPromise;
  updateCheck: (
    args: { data: CheckUpdateInput; where: CheckWhereUniqueInput }
  ) => CheckPromise;
  updateManyChecks: (
    args: { data: CheckUpdateManyMutationInput; where?: CheckWhereInput }
  ) => BatchPayloadPromise;
  upsertCheck: (
    args: {
      where: CheckWhereUniqueInput;
      create: CheckCreateInput;
      update: CheckUpdateInput;
    }
  ) => CheckPromise;
  deleteCheck: (where: CheckWhereUniqueInput) => CheckPromise;
  deleteManyChecks: (where?: CheckWhereInput) => BatchPayloadPromise;
  createCliAuthSession: (
    data: CliAuthSessionCreateInput
  ) => CliAuthSessionPromise;
  updateCliAuthSession: (
    args: {
      data: CliAuthSessionUpdateInput;
      where: CliAuthSessionWhereUniqueInput;
    }
  ) => CliAuthSessionPromise;
  updateManyCliAuthSessions: (
    args: {
      data: CliAuthSessionUpdateManyMutationInput;
      where?: CliAuthSessionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCliAuthSession: (
    args: {
      where: CliAuthSessionWhereUniqueInput;
      create: CliAuthSessionCreateInput;
      update: CliAuthSessionUpdateInput;
    }
  ) => CliAuthSessionPromise;
  deleteCliAuthSession: (
    where: CliAuthSessionWhereUniqueInput
  ) => CliAuthSessionPromise;
  deleteManyCliAuthSessions: (
    where?: CliAuthSessionWhereInput
  ) => BatchPayloadPromise;
  createComponent: (data: ComponentCreateInput) => ComponentPromise;
  updateComponent: (
    args: { data: ComponentUpdateInput; where: ComponentWhereUniqueInput }
  ) => ComponentPromise;
  updateManyComponents: (
    args: {
      data: ComponentUpdateManyMutationInput;
      where?: ComponentWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertComponent: (
    args: {
      where: ComponentWhereUniqueInput;
      create: ComponentCreateInput;
      update: ComponentUpdateInput;
    }
  ) => ComponentPromise;
  deleteComponent: (where: ComponentWhereUniqueInput) => ComponentPromise;
  deleteManyComponents: (where?: ComponentWhereInput) => BatchPayloadPromise;
  createExample: (data: ExampleCreateInput) => ExamplePromise;
  updateExample: (
    args: { data: ExampleUpdateInput; where: ExampleWhereUniqueInput }
  ) => ExamplePromise;
  updateManyExamples: (
    args: { data: ExampleUpdateManyMutationInput; where?: ExampleWhereInput }
  ) => BatchPayloadPromise;
  upsertExample: (
    args: {
      where: ExampleWhereUniqueInput;
      create: ExampleCreateInput;
      update: ExampleUpdateInput;
    }
  ) => ExamplePromise;
  deleteExample: (where: ExampleWhereUniqueInput) => ExamplePromise;
  deleteManyExamples: (where?: ExampleWhereInput) => BatchPayloadPromise;
  createMembership: (data: MembershipCreateInput) => MembershipPromise;
  updateMembership: (
    args: { data: MembershipUpdateInput; where: MembershipWhereUniqueInput }
  ) => MembershipPromise;
  updateManyMemberships: (
    args: {
      data: MembershipUpdateManyMutationInput;
      where?: MembershipWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertMembership: (
    args: {
      where: MembershipWhereUniqueInput;
      create: MembershipCreateInput;
      update: MembershipUpdateInput;
    }
  ) => MembershipPromise;
  deleteMembership: (where: MembershipWhereUniqueInput) => MembershipPromise;
  deleteManyMemberships: (where?: MembershipWhereInput) => BatchPayloadPromise;
  createRender: (data: RenderCreateInput) => RenderPromise;
  updateRender: (
    args: { data: RenderUpdateInput; where: RenderWhereUniqueInput }
  ) => RenderPromise;
  updateManyRenders: (
    args: { data: RenderUpdateManyMutationInput; where?: RenderWhereInput }
  ) => BatchPayloadPromise;
  upsertRender: (
    args: {
      where: RenderWhereUniqueInput;
      create: RenderCreateInput;
      update: RenderUpdateInput;
    }
  ) => RenderPromise;
  deleteRender: (where: RenderWhereUniqueInput) => RenderPromise;
  deleteManyRenders: (where?: RenderWhereInput) => BatchPayloadPromise;
  createRepo: (data: RepoCreateInput) => RepoPromise;
  updateRepo: (
    args: { data: RepoUpdateInput; where: RepoWhereUniqueInput }
  ) => RepoPromise;
  updateManyRepoes: (
    args: { data: RepoUpdateManyMutationInput; where?: RepoWhereInput }
  ) => BatchPayloadPromise;
  upsertRepo: (
    args: {
      where: RepoWhereUniqueInput;
      create: RepoCreateInput;
      update: RepoUpdateInput;
    }
  ) => RepoPromise;
  deleteRepo: (where: RepoWhereUniqueInput) => RepoPromise;
  deleteManyRepoes: (where?: RepoWhereInput) => BatchPayloadPromise;
  createTeam: (data: TeamCreateInput) => TeamPromise;
  updateTeam: (
    args: { data: TeamUpdateInput; where: TeamWhereUniqueInput }
  ) => TeamPromise;
  updateManyTeams: (
    args: { data: TeamUpdateManyMutationInput; where?: TeamWhereInput }
  ) => BatchPayloadPromise;
  upsertTeam: (
    args: {
      where: TeamWhereUniqueInput;
      create: TeamCreateInput;
      update: TeamUpdateInput;
    }
  ) => TeamPromise;
  deleteTeam: (where: TeamWhereUniqueInput) => TeamPromise;
  deleteManyTeams: (where?: TeamWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  check: (
    where?: CheckSubscriptionWhereInput
  ) => CheckSubscriptionPayloadSubscription;
  cliAuthSession: (
    where?: CliAuthSessionSubscriptionWhereInput
  ) => CliAuthSessionSubscriptionPayloadSubscription;
  component: (
    where?: ComponentSubscriptionWhereInput
  ) => ComponentSubscriptionPayloadSubscription;
  example: (
    where?: ExampleSubscriptionWhereInput
  ) => ExampleSubscriptionPayloadSubscription;
  membership: (
    where?: MembershipSubscriptionWhereInput
  ) => MembershipSubscriptionPayloadSubscription;
  render: (
    where?: RenderSubscriptionWhereInput
  ) => RenderSubscriptionPayloadSubscription;
  repo: (
    where?: RepoSubscriptionWhereInput
  ) => RepoSubscriptionPayloadSubscription;
  team: (
    where?: TeamSubscriptionWhereInput
  ) => TeamSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "MEMBER" | "ADMIN";

export type RenderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC";

export type MembershipOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "role_ASC"
  | "role_DESC";

export type ComponentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type RepoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "owner_ASC"
  | "owner_DESC"
  | "name_ASC"
  | "name_DESC";

export type CheckOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "githubCheckId_ASC"
  | "githubCheckId_DESC"
  | "headBranch_ASC"
  | "headBranch_DESC"
  | "headSha_ASC"
  | "headSha_DESC";

export type ExampleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type CliAuthSessionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "expiresAt_ASC"
  | "expiresAt_DESC";

export type TeamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "githubAccessToken_ASC"
  | "githubAccessToken_DESC"
  | "figmaAccessToken_ASC"
  | "figmaAccessToken_DESC"
  | "figmaRefreshToken_ASC"
  | "figmaRefreshToken_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CheckWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  githubCheckId?: Int;
}>;

export interface RenderWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  imageUrl?: String;
  imageUrl_not?: String;
  imageUrl_in?: String[] | String;
  imageUrl_not_in?: String[] | String;
  imageUrl_lt?: String;
  imageUrl_lte?: String;
  imageUrl_gt?: String;
  imageUrl_gte?: String;
  imageUrl_contains?: String;
  imageUrl_not_contains?: String;
  imageUrl_starts_with?: String;
  imageUrl_not_starts_with?: String;
  imageUrl_ends_with?: String;
  imageUrl_not_ends_with?: String;
  example?: ExampleWhereInput;
  check?: CheckWhereInput;
  AND?: RenderWhereInput[] | RenderWhereInput;
  OR?: RenderWhereInput[] | RenderWhereInput;
  NOT?: RenderWhereInput[] | RenderWhereInput;
}

export interface ExampleWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  component?: ComponentWhereInput;
  renders_every?: RenderWhereInput;
  renders_some?: RenderWhereInput;
  renders_none?: RenderWhereInput;
  AND?: ExampleWhereInput[] | ExampleWhereInput;
  OR?: ExampleWhereInput[] | ExampleWhereInput;
  NOT?: ExampleWhereInput[] | ExampleWhereInput;
}

export interface ComponentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  team?: TeamWhereInput;
  examples_every?: ExampleWhereInput;
  examples_some?: ExampleWhereInput;
  examples_none?: ExampleWhereInput;
  AND?: ComponentWhereInput[] | ComponentWhereInput;
  OR?: ComponentWhereInput[] | ComponentWhereInput;
  NOT?: ComponentWhereInput[] | ComponentWhereInput;
}

export interface TeamWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  memberships_every?: MembershipWhereInput;
  memberships_some?: MembershipWhereInput;
  memberships_none?: MembershipWhereInput;
  components_every?: ComponentWhereInput;
  components_some?: ComponentWhereInput;
  components_none?: ComponentWhereInput;
  repos_every?: RepoWhereInput;
  repos_some?: RepoWhereInput;
  repos_none?: RepoWhereInput;
  AND?: TeamWhereInput[] | TeamWhereInput;
  OR?: TeamWhereInput[] | TeamWhereInput;
  NOT?: TeamWhereInput[] | TeamWhereInput;
}

export interface MembershipWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  user?: UserWhereInput;
  team?: TeamWhereInput;
  AND?: MembershipWhereInput[] | MembershipWhereInput;
  OR?: MembershipWhereInput[] | MembershipWhereInput;
  NOT?: MembershipWhereInput[] | MembershipWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  githubAccessToken?: String;
  githubAccessToken_not?: String;
  githubAccessToken_in?: String[] | String;
  githubAccessToken_not_in?: String[] | String;
  githubAccessToken_lt?: String;
  githubAccessToken_lte?: String;
  githubAccessToken_gt?: String;
  githubAccessToken_gte?: String;
  githubAccessToken_contains?: String;
  githubAccessToken_not_contains?: String;
  githubAccessToken_starts_with?: String;
  githubAccessToken_not_starts_with?: String;
  githubAccessToken_ends_with?: String;
  githubAccessToken_not_ends_with?: String;
  figmaAccessToken?: String;
  figmaAccessToken_not?: String;
  figmaAccessToken_in?: String[] | String;
  figmaAccessToken_not_in?: String[] | String;
  figmaAccessToken_lt?: String;
  figmaAccessToken_lte?: String;
  figmaAccessToken_gt?: String;
  figmaAccessToken_gte?: String;
  figmaAccessToken_contains?: String;
  figmaAccessToken_not_contains?: String;
  figmaAccessToken_starts_with?: String;
  figmaAccessToken_not_starts_with?: String;
  figmaAccessToken_ends_with?: String;
  figmaAccessToken_not_ends_with?: String;
  figmaRefreshToken?: String;
  figmaRefreshToken_not?: String;
  figmaRefreshToken_in?: String[] | String;
  figmaRefreshToken_not_in?: String[] | String;
  figmaRefreshToken_lt?: String;
  figmaRefreshToken_lte?: String;
  figmaRefreshToken_gt?: String;
  figmaRefreshToken_gte?: String;
  figmaRefreshToken_contains?: String;
  figmaRefreshToken_not_contains?: String;
  figmaRefreshToken_starts_with?: String;
  figmaRefreshToken_not_starts_with?: String;
  figmaRefreshToken_ends_with?: String;
  figmaRefreshToken_not_ends_with?: String;
  memberships_every?: MembershipWhereInput;
  memberships_some?: MembershipWhereInput;
  memberships_none?: MembershipWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface RepoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  owner?: String;
  owner_not?: String;
  owner_in?: String[] | String;
  owner_not_in?: String[] | String;
  owner_lt?: String;
  owner_lte?: String;
  owner_gt?: String;
  owner_gte?: String;
  owner_contains?: String;
  owner_not_contains?: String;
  owner_starts_with?: String;
  owner_not_starts_with?: String;
  owner_ends_with?: String;
  owner_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  checks_every?: CheckWhereInput;
  checks_some?: CheckWhereInput;
  checks_none?: CheckWhereInput;
  team?: TeamWhereInput;
  AND?: RepoWhereInput[] | RepoWhereInput;
  OR?: RepoWhereInput[] | RepoWhereInput;
  NOT?: RepoWhereInput[] | RepoWhereInput;
}

export interface CheckWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  githubCheckId?: Int;
  githubCheckId_not?: Int;
  githubCheckId_in?: Int[] | Int;
  githubCheckId_not_in?: Int[] | Int;
  githubCheckId_lt?: Int;
  githubCheckId_lte?: Int;
  githubCheckId_gt?: Int;
  githubCheckId_gte?: Int;
  headBranch?: String;
  headBranch_not?: String;
  headBranch_in?: String[] | String;
  headBranch_not_in?: String[] | String;
  headBranch_lt?: String;
  headBranch_lte?: String;
  headBranch_gt?: String;
  headBranch_gte?: String;
  headBranch_contains?: String;
  headBranch_not_contains?: String;
  headBranch_starts_with?: String;
  headBranch_not_starts_with?: String;
  headBranch_ends_with?: String;
  headBranch_not_ends_with?: String;
  headSha?: String;
  headSha_not?: String;
  headSha_in?: String[] | String;
  headSha_not_in?: String[] | String;
  headSha_lt?: String;
  headSha_lte?: String;
  headSha_gt?: String;
  headSha_gte?: String;
  headSha_contains?: String;
  headSha_not_contains?: String;
  headSha_starts_with?: String;
  headSha_not_starts_with?: String;
  headSha_ends_with?: String;
  headSha_not_ends_with?: String;
  renders_every?: RenderWhereInput;
  renders_some?: RenderWhereInput;
  renders_none?: RenderWhereInput;
  repo?: RepoWhereInput;
  AND?: CheckWhereInput[] | CheckWhereInput;
  OR?: CheckWhereInput[] | CheckWhereInput;
  NOT?: CheckWhereInput[] | CheckWhereInput;
}

export type CliAuthSessionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CliAuthSessionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  expiresAt?: DateTimeInput;
  expiresAt_not?: DateTimeInput;
  expiresAt_in?: DateTimeInput[] | DateTimeInput;
  expiresAt_not_in?: DateTimeInput[] | DateTimeInput;
  expiresAt_lt?: DateTimeInput;
  expiresAt_lte?: DateTimeInput;
  expiresAt_gt?: DateTimeInput;
  expiresAt_gte?: DateTimeInput;
  authenticatedUser?: UserWhereInput;
  AND?: CliAuthSessionWhereInput[] | CliAuthSessionWhereInput;
  OR?: CliAuthSessionWhereInput[] | CliAuthSessionWhereInput;
  NOT?: CliAuthSessionWhereInput[] | CliAuthSessionWhereInput;
}

export type ComponentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type ExampleWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type MembershipWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type RenderWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type RepoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type TeamWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface CheckCreateInput {
  githubCheckId?: Int;
  headBranch: String;
  headSha: String;
  renders?: RenderCreateManyWithoutCheckInput;
  repo?: RepoCreateOneWithoutChecksInput;
}

export interface RenderCreateManyWithoutCheckInput {
  create?: RenderCreateWithoutCheckInput[] | RenderCreateWithoutCheckInput;
  connect?: RenderWhereUniqueInput[] | RenderWhereUniqueInput;
}

export interface RenderCreateWithoutCheckInput {
  imageUrl: String;
  example: ExampleCreateOneWithoutRendersInput;
}

export interface ExampleCreateOneWithoutRendersInput {
  create?: ExampleCreateWithoutRendersInput;
  connect?: ExampleWhereUniqueInput;
}

export interface ExampleCreateWithoutRendersInput {
  name: String;
  component: ComponentCreateOneWithoutExamplesInput;
}

export interface ComponentCreateOneWithoutExamplesInput {
  create?: ComponentCreateWithoutExamplesInput;
  connect?: ComponentWhereUniqueInput;
}

export interface ComponentCreateWithoutExamplesInput {
  name: String;
  team: TeamCreateOneWithoutComponentsInput;
}

export interface TeamCreateOneWithoutComponentsInput {
  create?: TeamCreateWithoutComponentsInput;
  connect?: TeamWhereUniqueInput;
}

export interface TeamCreateWithoutComponentsInput {
  name: String;
  memberships?: MembershipCreateManyWithoutTeamInput;
  repos?: RepoCreateManyWithoutTeamInput;
}

export interface MembershipCreateManyWithoutTeamInput {
  create?:
    | MembershipCreateWithoutTeamInput[]
    | MembershipCreateWithoutTeamInput;
  connect?: MembershipWhereUniqueInput[] | MembershipWhereUniqueInput;
}

export interface MembershipCreateWithoutTeamInput {
  role?: Role;
  user: UserCreateOneWithoutMembershipsInput;
}

export interface UserCreateOneWithoutMembershipsInput {
  create?: UserCreateWithoutMembershipsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutMembershipsInput {
  email: String;
  name: String;
  githubAccessToken?: String;
  figmaAccessToken?: String;
  figmaRefreshToken?: String;
}

export interface RepoCreateManyWithoutTeamInput {
  create?: RepoCreateWithoutTeamInput[] | RepoCreateWithoutTeamInput;
  connect?: RepoWhereUniqueInput[] | RepoWhereUniqueInput;
}

export interface RepoCreateWithoutTeamInput {
  owner: String;
  name: String;
  checks?: CheckCreateManyWithoutRepoInput;
}

export interface CheckCreateManyWithoutRepoInput {
  create?: CheckCreateWithoutRepoInput[] | CheckCreateWithoutRepoInput;
  connect?: CheckWhereUniqueInput[] | CheckWhereUniqueInput;
}

export interface CheckCreateWithoutRepoInput {
  githubCheckId?: Int;
  headBranch: String;
  headSha: String;
  renders?: RenderCreateManyWithoutCheckInput;
}

export interface RepoCreateOneWithoutChecksInput {
  create?: RepoCreateWithoutChecksInput;
  connect?: RepoWhereUniqueInput;
}

export interface RepoCreateWithoutChecksInput {
  owner: String;
  name: String;
  team?: TeamCreateOneWithoutReposInput;
}

export interface TeamCreateOneWithoutReposInput {
  create?: TeamCreateWithoutReposInput;
  connect?: TeamWhereUniqueInput;
}

export interface TeamCreateWithoutReposInput {
  name: String;
  memberships?: MembershipCreateManyWithoutTeamInput;
  components?: ComponentCreateManyWithoutTeamInput;
}

export interface ComponentCreateManyWithoutTeamInput {
  create?: ComponentCreateWithoutTeamInput[] | ComponentCreateWithoutTeamInput;
  connect?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
}

export interface ComponentCreateWithoutTeamInput {
  name: String;
  examples?: ExampleCreateManyWithoutComponentInput;
}

export interface ExampleCreateManyWithoutComponentInput {
  create?:
    | ExampleCreateWithoutComponentInput[]
    | ExampleCreateWithoutComponentInput;
  connect?: ExampleWhereUniqueInput[] | ExampleWhereUniqueInput;
}

export interface ExampleCreateWithoutComponentInput {
  name: String;
  renders?: RenderCreateManyWithoutExampleInput;
}

export interface RenderCreateManyWithoutExampleInput {
  create?: RenderCreateWithoutExampleInput[] | RenderCreateWithoutExampleInput;
  connect?: RenderWhereUniqueInput[] | RenderWhereUniqueInput;
}

export interface RenderCreateWithoutExampleInput {
  imageUrl: String;
  check?: CheckCreateOneWithoutRendersInput;
}

export interface CheckCreateOneWithoutRendersInput {
  create?: CheckCreateWithoutRendersInput;
  connect?: CheckWhereUniqueInput;
}

export interface CheckCreateWithoutRendersInput {
  githubCheckId?: Int;
  headBranch: String;
  headSha: String;
  repo?: RepoCreateOneWithoutChecksInput;
}

export interface CheckUpdateInput {
  githubCheckId?: Int;
  headBranch?: String;
  headSha?: String;
  renders?: RenderUpdateManyWithoutCheckInput;
  repo?: RepoUpdateOneWithoutChecksInput;
}

export interface RenderUpdateManyWithoutCheckInput {
  create?: RenderCreateWithoutCheckInput[] | RenderCreateWithoutCheckInput;
  delete?: RenderWhereUniqueInput[] | RenderWhereUniqueInput;
  connect?: RenderWhereUniqueInput[] | RenderWhereUniqueInput;
  set?: RenderWhereUniqueInput[] | RenderWhereUniqueInput;
  disconnect?: RenderWhereUniqueInput[] | RenderWhereUniqueInput;
  update?:
    | RenderUpdateWithWhereUniqueWithoutCheckInput[]
    | RenderUpdateWithWhereUniqueWithoutCheckInput;
  upsert?:
    | RenderUpsertWithWhereUniqueWithoutCheckInput[]
    | RenderUpsertWithWhereUniqueWithoutCheckInput;
  deleteMany?: RenderScalarWhereInput[] | RenderScalarWhereInput;
  updateMany?:
    | RenderUpdateManyWithWhereNestedInput[]
    | RenderUpdateManyWithWhereNestedInput;
}

export interface RenderUpdateWithWhereUniqueWithoutCheckInput {
  where: RenderWhereUniqueInput;
  data: RenderUpdateWithoutCheckDataInput;
}

export interface RenderUpdateWithoutCheckDataInput {
  imageUrl?: String;
  example?: ExampleUpdateOneRequiredWithoutRendersInput;
}

export interface ExampleUpdateOneRequiredWithoutRendersInput {
  create?: ExampleCreateWithoutRendersInput;
  update?: ExampleUpdateWithoutRendersDataInput;
  upsert?: ExampleUpsertWithoutRendersInput;
  connect?: ExampleWhereUniqueInput;
}

export interface ExampleUpdateWithoutRendersDataInput {
  name?: String;
  component?: ComponentUpdateOneRequiredWithoutExamplesInput;
}

export interface ComponentUpdateOneRequiredWithoutExamplesInput {
  create?: ComponentCreateWithoutExamplesInput;
  update?: ComponentUpdateWithoutExamplesDataInput;
  upsert?: ComponentUpsertWithoutExamplesInput;
  connect?: ComponentWhereUniqueInput;
}

export interface ComponentUpdateWithoutExamplesDataInput {
  name?: String;
  team?: TeamUpdateOneRequiredWithoutComponentsInput;
}

export interface TeamUpdateOneRequiredWithoutComponentsInput {
  create?: TeamCreateWithoutComponentsInput;
  update?: TeamUpdateWithoutComponentsDataInput;
  upsert?: TeamUpsertWithoutComponentsInput;
  connect?: TeamWhereUniqueInput;
}

export interface TeamUpdateWithoutComponentsDataInput {
  name?: String;
  memberships?: MembershipUpdateManyWithoutTeamInput;
  repos?: RepoUpdateManyWithoutTeamInput;
}

export interface MembershipUpdateManyWithoutTeamInput {
  create?:
    | MembershipCreateWithoutTeamInput[]
    | MembershipCreateWithoutTeamInput;
  delete?: MembershipWhereUniqueInput[] | MembershipWhereUniqueInput;
  connect?: MembershipWhereUniqueInput[] | MembershipWhereUniqueInput;
  set?: MembershipWhereUniqueInput[] | MembershipWhereUniqueInput;
  disconnect?: MembershipWhereUniqueInput[] | MembershipWhereUniqueInput;
  update?:
    | MembershipUpdateWithWhereUniqueWithoutTeamInput[]
    | MembershipUpdateWithWhereUniqueWithoutTeamInput;
  upsert?:
    | MembershipUpsertWithWhereUniqueWithoutTeamInput[]
    | MembershipUpsertWithWhereUniqueWithoutTeamInput;
  deleteMany?: MembershipScalarWhereInput[] | MembershipScalarWhereInput;
  updateMany?:
    | MembershipUpdateManyWithWhereNestedInput[]
    | MembershipUpdateManyWithWhereNestedInput;
}

export interface MembershipUpdateWithWhereUniqueWithoutTeamInput {
  where: MembershipWhereUniqueInput;
  data: MembershipUpdateWithoutTeamDataInput;
}

export interface MembershipUpdateWithoutTeamDataInput {
  role?: Role;
  user?: UserUpdateOneRequiredWithoutMembershipsInput;
}

export interface UserUpdateOneRequiredWithoutMembershipsInput {
  create?: UserCreateWithoutMembershipsInput;
  update?: UserUpdateWithoutMembershipsDataInput;
  upsert?: UserUpsertWithoutMembershipsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutMembershipsDataInput {
  email?: String;
  name?: String;
  githubAccessToken?: String;
  figmaAccessToken?: String;
  figmaRefreshToken?: String;
}

export interface UserUpsertWithoutMembershipsInput {
  update: UserUpdateWithoutMembershipsDataInput;
  create: UserCreateWithoutMembershipsInput;
}

export interface MembershipUpsertWithWhereUniqueWithoutTeamInput {
  where: MembershipWhereUniqueInput;
  update: MembershipUpdateWithoutTeamDataInput;
  create: MembershipCreateWithoutTeamInput;
}

export interface MembershipScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  AND?: MembershipScalarWhereInput[] | MembershipScalarWhereInput;
  OR?: MembershipScalarWhereInput[] | MembershipScalarWhereInput;
  NOT?: MembershipScalarWhereInput[] | MembershipScalarWhereInput;
}

export interface MembershipUpdateManyWithWhereNestedInput {
  where: MembershipScalarWhereInput;
  data: MembershipUpdateManyDataInput;
}

export interface MembershipUpdateManyDataInput {
  role?: Role;
}

export interface RepoUpdateManyWithoutTeamInput {
  create?: RepoCreateWithoutTeamInput[] | RepoCreateWithoutTeamInput;
  delete?: RepoWhereUniqueInput[] | RepoWhereUniqueInput;
  connect?: RepoWhereUniqueInput[] | RepoWhereUniqueInput;
  set?: RepoWhereUniqueInput[] | RepoWhereUniqueInput;
  disconnect?: RepoWhereUniqueInput[] | RepoWhereUniqueInput;
  update?:
    | RepoUpdateWithWhereUniqueWithoutTeamInput[]
    | RepoUpdateWithWhereUniqueWithoutTeamInput;
  upsert?:
    | RepoUpsertWithWhereUniqueWithoutTeamInput[]
    | RepoUpsertWithWhereUniqueWithoutTeamInput;
  deleteMany?: RepoScalarWhereInput[] | RepoScalarWhereInput;
  updateMany?:
    | RepoUpdateManyWithWhereNestedInput[]
    | RepoUpdateManyWithWhereNestedInput;
}

export interface RepoUpdateWithWhereUniqueWithoutTeamInput {
  where: RepoWhereUniqueInput;
  data: RepoUpdateWithoutTeamDataInput;
}

export interface RepoUpdateWithoutTeamDataInput {
  owner?: String;
  name?: String;
  checks?: CheckUpdateManyWithoutRepoInput;
}

export interface CheckUpdateManyWithoutRepoInput {
  create?: CheckCreateWithoutRepoInput[] | CheckCreateWithoutRepoInput;
  delete?: CheckWhereUniqueInput[] | CheckWhereUniqueInput;
  connect?: CheckWhereUniqueInput[] | CheckWhereUniqueInput;
  set?: CheckWhereUniqueInput[] | CheckWhereUniqueInput;
  disconnect?: CheckWhereUniqueInput[] | CheckWhereUniqueInput;
  update?:
    | CheckUpdateWithWhereUniqueWithoutRepoInput[]
    | CheckUpdateWithWhereUniqueWithoutRepoInput;
  upsert?:
    | CheckUpsertWithWhereUniqueWithoutRepoInput[]
    | CheckUpsertWithWhereUniqueWithoutRepoInput;
  deleteMany?: CheckScalarWhereInput[] | CheckScalarWhereInput;
  updateMany?:
    | CheckUpdateManyWithWhereNestedInput[]
    | CheckUpdateManyWithWhereNestedInput;
}

export interface CheckUpdateWithWhereUniqueWithoutRepoInput {
  where: CheckWhereUniqueInput;
  data: CheckUpdateWithoutRepoDataInput;
}

export interface CheckUpdateWithoutRepoDataInput {
  githubCheckId?: Int;
  headBranch?: String;
  headSha?: String;
  renders?: RenderUpdateManyWithoutCheckInput;
}

export interface CheckUpsertWithWhereUniqueWithoutRepoInput {
  where: CheckWhereUniqueInput;
  update: CheckUpdateWithoutRepoDataInput;
  create: CheckCreateWithoutRepoInput;
}

export interface CheckScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  githubCheckId?: Int;
  githubCheckId_not?: Int;
  githubCheckId_in?: Int[] | Int;
  githubCheckId_not_in?: Int[] | Int;
  githubCheckId_lt?: Int;
  githubCheckId_lte?: Int;
  githubCheckId_gt?: Int;
  githubCheckId_gte?: Int;
  headBranch?: String;
  headBranch_not?: String;
  headBranch_in?: String[] | String;
  headBranch_not_in?: String[] | String;
  headBranch_lt?: String;
  headBranch_lte?: String;
  headBranch_gt?: String;
  headBranch_gte?: String;
  headBranch_contains?: String;
  headBranch_not_contains?: String;
  headBranch_starts_with?: String;
  headBranch_not_starts_with?: String;
  headBranch_ends_with?: String;
  headBranch_not_ends_with?: String;
  headSha?: String;
  headSha_not?: String;
  headSha_in?: String[] | String;
  headSha_not_in?: String[] | String;
  headSha_lt?: String;
  headSha_lte?: String;
  headSha_gt?: String;
  headSha_gte?: String;
  headSha_contains?: String;
  headSha_not_contains?: String;
  headSha_starts_with?: String;
  headSha_not_starts_with?: String;
  headSha_ends_with?: String;
  headSha_not_ends_with?: String;
  AND?: CheckScalarWhereInput[] | CheckScalarWhereInput;
  OR?: CheckScalarWhereInput[] | CheckScalarWhereInput;
  NOT?: CheckScalarWhereInput[] | CheckScalarWhereInput;
}

export interface CheckUpdateManyWithWhereNestedInput {
  where: CheckScalarWhereInput;
  data: CheckUpdateManyDataInput;
}

export interface CheckUpdateManyDataInput {
  githubCheckId?: Int;
  headBranch?: String;
  headSha?: String;
}

export interface RepoUpsertWithWhereUniqueWithoutTeamInput {
  where: RepoWhereUniqueInput;
  update: RepoUpdateWithoutTeamDataInput;
  create: RepoCreateWithoutTeamInput;
}

export interface RepoScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  owner?: String;
  owner_not?: String;
  owner_in?: String[] | String;
  owner_not_in?: String[] | String;
  owner_lt?: String;
  owner_lte?: String;
  owner_gt?: String;
  owner_gte?: String;
  owner_contains?: String;
  owner_not_contains?: String;
  owner_starts_with?: String;
  owner_not_starts_with?: String;
  owner_ends_with?: String;
  owner_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: RepoScalarWhereInput[] | RepoScalarWhereInput;
  OR?: RepoScalarWhereInput[] | RepoScalarWhereInput;
  NOT?: RepoScalarWhereInput[] | RepoScalarWhereInput;
}

export interface RepoUpdateManyWithWhereNestedInput {
  where: RepoScalarWhereInput;
  data: RepoUpdateManyDataInput;
}

export interface RepoUpdateManyDataInput {
  owner?: String;
  name?: String;
}

export interface TeamUpsertWithoutComponentsInput {
  update: TeamUpdateWithoutComponentsDataInput;
  create: TeamCreateWithoutComponentsInput;
}

export interface ComponentUpsertWithoutExamplesInput {
  update: ComponentUpdateWithoutExamplesDataInput;
  create: ComponentCreateWithoutExamplesInput;
}

export interface ExampleUpsertWithoutRendersInput {
  update: ExampleUpdateWithoutRendersDataInput;
  create: ExampleCreateWithoutRendersInput;
}

export interface RenderUpsertWithWhereUniqueWithoutCheckInput {
  where: RenderWhereUniqueInput;
  update: RenderUpdateWithoutCheckDataInput;
  create: RenderCreateWithoutCheckInput;
}

export interface RenderScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  imageUrl?: String;
  imageUrl_not?: String;
  imageUrl_in?: String[] | String;
  imageUrl_not_in?: String[] | String;
  imageUrl_lt?: String;
  imageUrl_lte?: String;
  imageUrl_gt?: String;
  imageUrl_gte?: String;
  imageUrl_contains?: String;
  imageUrl_not_contains?: String;
  imageUrl_starts_with?: String;
  imageUrl_not_starts_with?: String;
  imageUrl_ends_with?: String;
  imageUrl_not_ends_with?: String;
  AND?: RenderScalarWhereInput[] | RenderScalarWhereInput;
  OR?: RenderScalarWhereInput[] | RenderScalarWhereInput;
  NOT?: RenderScalarWhereInput[] | RenderScalarWhereInput;
}

export interface RenderUpdateManyWithWhereNestedInput {
  where: RenderScalarWhereInput;
  data: RenderUpdateManyDataInput;
}

export interface RenderUpdateManyDataInput {
  imageUrl?: String;
}

export interface RepoUpdateOneWithoutChecksInput {
  create?: RepoCreateWithoutChecksInput;
  update?: RepoUpdateWithoutChecksDataInput;
  upsert?: RepoUpsertWithoutChecksInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: RepoWhereUniqueInput;
}

export interface RepoUpdateWithoutChecksDataInput {
  owner?: String;
  name?: String;
  team?: TeamUpdateOneWithoutReposInput;
}

export interface TeamUpdateOneWithoutReposInput {
  create?: TeamCreateWithoutReposInput;
  update?: TeamUpdateWithoutReposDataInput;
  upsert?: TeamUpsertWithoutReposInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TeamWhereUniqueInput;
}

export interface TeamUpdateWithoutReposDataInput {
  name?: String;
  memberships?: MembershipUpdateManyWithoutTeamInput;
  components?: ComponentUpdateManyWithoutTeamInput;
}

export interface ComponentUpdateManyWithoutTeamInput {
  create?: ComponentCreateWithoutTeamInput[] | ComponentCreateWithoutTeamInput;
  delete?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  connect?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  set?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  disconnect?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  update?:
    | ComponentUpdateWithWhereUniqueWithoutTeamInput[]
    | ComponentUpdateWithWhereUniqueWithoutTeamInput;
  upsert?:
    | ComponentUpsertWithWhereUniqueWithoutTeamInput[]
    | ComponentUpsertWithWhereUniqueWithoutTeamInput;
  deleteMany?: ComponentScalarWhereInput[] | ComponentScalarWhereInput;
  updateMany?:
    | ComponentUpdateManyWithWhereNestedInput[]
    | ComponentUpdateManyWithWhereNestedInput;
}

export interface ComponentUpdateWithWhereUniqueWithoutTeamInput {
  where: ComponentWhereUniqueInput;
  data: ComponentUpdateWithoutTeamDataInput;
}

export interface ComponentUpdateWithoutTeamDataInput {
  name?: String;
  examples?: ExampleUpdateManyWithoutComponentInput;
}

export interface ExampleUpdateManyWithoutComponentInput {
  create?:
    | ExampleCreateWithoutComponentInput[]
    | ExampleCreateWithoutComponentInput;
  delete?: ExampleWhereUniqueInput[] | ExampleWhereUniqueInput;
  connect?: ExampleWhereUniqueInput[] | ExampleWhereUniqueInput;
  set?: ExampleWhereUniqueInput[] | ExampleWhereUniqueInput;
  disconnect?: ExampleWhereUniqueInput[] | ExampleWhereUniqueInput;
  update?:
    | ExampleUpdateWithWhereUniqueWithoutComponentInput[]
    | ExampleUpdateWithWhereUniqueWithoutComponentInput;
  upsert?:
    | ExampleUpsertWithWhereUniqueWithoutComponentInput[]
    | ExampleUpsertWithWhereUniqueWithoutComponentInput;
  deleteMany?: ExampleScalarWhereInput[] | ExampleScalarWhereInput;
  updateMany?:
    | ExampleUpdateManyWithWhereNestedInput[]
    | ExampleUpdateManyWithWhereNestedInput;
}

export interface ExampleUpdateWithWhereUniqueWithoutComponentInput {
  where: ExampleWhereUniqueInput;
  data: ExampleUpdateWithoutComponentDataInput;
}

export interface ExampleUpdateWithoutComponentDataInput {
  name?: String;
  renders?: RenderUpdateManyWithoutExampleInput;
}

export interface RenderUpdateManyWithoutExampleInput {
  create?: RenderCreateWithoutExampleInput[] | RenderCreateWithoutExampleInput;
  delete?: RenderWhereUniqueInput[] | RenderWhereUniqueInput;
  connect?: RenderWhereUniqueInput[] | RenderWhereUniqueInput;
  set?: RenderWhereUniqueInput[] | RenderWhereUniqueInput;
  disconnect?: RenderWhereUniqueInput[] | RenderWhereUniqueInput;
  update?:
    | RenderUpdateWithWhereUniqueWithoutExampleInput[]
    | RenderUpdateWithWhereUniqueWithoutExampleInput;
  upsert?:
    | RenderUpsertWithWhereUniqueWithoutExampleInput[]
    | RenderUpsertWithWhereUniqueWithoutExampleInput;
  deleteMany?: RenderScalarWhereInput[] | RenderScalarWhereInput;
  updateMany?:
    | RenderUpdateManyWithWhereNestedInput[]
    | RenderUpdateManyWithWhereNestedInput;
}

export interface RenderUpdateWithWhereUniqueWithoutExampleInput {
  where: RenderWhereUniqueInput;
  data: RenderUpdateWithoutExampleDataInput;
}

export interface RenderUpdateWithoutExampleDataInput {
  imageUrl?: String;
  check?: CheckUpdateOneWithoutRendersInput;
}

export interface CheckUpdateOneWithoutRendersInput {
  create?: CheckCreateWithoutRendersInput;
  update?: CheckUpdateWithoutRendersDataInput;
  upsert?: CheckUpsertWithoutRendersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CheckWhereUniqueInput;
}

export interface CheckUpdateWithoutRendersDataInput {
  githubCheckId?: Int;
  headBranch?: String;
  headSha?: String;
  repo?: RepoUpdateOneWithoutChecksInput;
}

export interface CheckUpsertWithoutRendersInput {
  update: CheckUpdateWithoutRendersDataInput;
  create: CheckCreateWithoutRendersInput;
}

export interface RenderUpsertWithWhereUniqueWithoutExampleInput {
  where: RenderWhereUniqueInput;
  update: RenderUpdateWithoutExampleDataInput;
  create: RenderCreateWithoutExampleInput;
}

export interface ExampleUpsertWithWhereUniqueWithoutComponentInput {
  where: ExampleWhereUniqueInput;
  update: ExampleUpdateWithoutComponentDataInput;
  create: ExampleCreateWithoutComponentInput;
}

export interface ExampleScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: ExampleScalarWhereInput[] | ExampleScalarWhereInput;
  OR?: ExampleScalarWhereInput[] | ExampleScalarWhereInput;
  NOT?: ExampleScalarWhereInput[] | ExampleScalarWhereInput;
}

export interface ExampleUpdateManyWithWhereNestedInput {
  where: ExampleScalarWhereInput;
  data: ExampleUpdateManyDataInput;
}

export interface ExampleUpdateManyDataInput {
  name?: String;
}

export interface ComponentUpsertWithWhereUniqueWithoutTeamInput {
  where: ComponentWhereUniqueInput;
  update: ComponentUpdateWithoutTeamDataInput;
  create: ComponentCreateWithoutTeamInput;
}

export interface ComponentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: ComponentScalarWhereInput[] | ComponentScalarWhereInput;
  OR?: ComponentScalarWhereInput[] | ComponentScalarWhereInput;
  NOT?: ComponentScalarWhereInput[] | ComponentScalarWhereInput;
}

export interface ComponentUpdateManyWithWhereNestedInput {
  where: ComponentScalarWhereInput;
  data: ComponentUpdateManyDataInput;
}

export interface ComponentUpdateManyDataInput {
  name?: String;
}

export interface TeamUpsertWithoutReposInput {
  update: TeamUpdateWithoutReposDataInput;
  create: TeamCreateWithoutReposInput;
}

export interface RepoUpsertWithoutChecksInput {
  update: RepoUpdateWithoutChecksDataInput;
  create: RepoCreateWithoutChecksInput;
}

export interface CheckUpdateManyMutationInput {
  githubCheckId?: Int;
  headBranch?: String;
  headSha?: String;
}

export interface CliAuthSessionCreateInput {
  expiresAt: DateTimeInput;
  authenticatedUser?: UserCreateOneInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  email: String;
  name: String;
  githubAccessToken?: String;
  figmaAccessToken?: String;
  figmaRefreshToken?: String;
  memberships?: MembershipCreateManyWithoutUserInput;
}

export interface MembershipCreateManyWithoutUserInput {
  create?:
    | MembershipCreateWithoutUserInput[]
    | MembershipCreateWithoutUserInput;
  connect?: MembershipWhereUniqueInput[] | MembershipWhereUniqueInput;
}

export interface MembershipCreateWithoutUserInput {
  role?: Role;
  team: TeamCreateOneWithoutMembershipsInput;
}

export interface TeamCreateOneWithoutMembershipsInput {
  create?: TeamCreateWithoutMembershipsInput;
  connect?: TeamWhereUniqueInput;
}

export interface TeamCreateWithoutMembershipsInput {
  name: String;
  components?: ComponentCreateManyWithoutTeamInput;
  repos?: RepoCreateManyWithoutTeamInput;
}

export interface CliAuthSessionUpdateInput {
  expiresAt?: DateTimeInput;
  authenticatedUser?: UserUpdateOneInput;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  email?: String;
  name?: String;
  githubAccessToken?: String;
  figmaAccessToken?: String;
  figmaRefreshToken?: String;
  memberships?: MembershipUpdateManyWithoutUserInput;
}

export interface MembershipUpdateManyWithoutUserInput {
  create?:
    | MembershipCreateWithoutUserInput[]
    | MembershipCreateWithoutUserInput;
  delete?: MembershipWhereUniqueInput[] | MembershipWhereUniqueInput;
  connect?: MembershipWhereUniqueInput[] | MembershipWhereUniqueInput;
  set?: MembershipWhereUniqueInput[] | MembershipWhereUniqueInput;
  disconnect?: MembershipWhereUniqueInput[] | MembershipWhereUniqueInput;
  update?:
    | MembershipUpdateWithWhereUniqueWithoutUserInput[]
    | MembershipUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | MembershipUpsertWithWhereUniqueWithoutUserInput[]
    | MembershipUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: MembershipScalarWhereInput[] | MembershipScalarWhereInput;
  updateMany?:
    | MembershipUpdateManyWithWhereNestedInput[]
    | MembershipUpdateManyWithWhereNestedInput;
}

export interface MembershipUpdateWithWhereUniqueWithoutUserInput {
  where: MembershipWhereUniqueInput;
  data: MembershipUpdateWithoutUserDataInput;
}

export interface MembershipUpdateWithoutUserDataInput {
  role?: Role;
  team?: TeamUpdateOneRequiredWithoutMembershipsInput;
}

export interface TeamUpdateOneRequiredWithoutMembershipsInput {
  create?: TeamCreateWithoutMembershipsInput;
  update?: TeamUpdateWithoutMembershipsDataInput;
  upsert?: TeamUpsertWithoutMembershipsInput;
  connect?: TeamWhereUniqueInput;
}

export interface TeamUpdateWithoutMembershipsDataInput {
  name?: String;
  components?: ComponentUpdateManyWithoutTeamInput;
  repos?: RepoUpdateManyWithoutTeamInput;
}

export interface TeamUpsertWithoutMembershipsInput {
  update: TeamUpdateWithoutMembershipsDataInput;
  create: TeamCreateWithoutMembershipsInput;
}

export interface MembershipUpsertWithWhereUniqueWithoutUserInput {
  where: MembershipWhereUniqueInput;
  update: MembershipUpdateWithoutUserDataInput;
  create: MembershipCreateWithoutUserInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface CliAuthSessionUpdateManyMutationInput {
  expiresAt?: DateTimeInput;
}

export interface ComponentCreateInput {
  name: String;
  team: TeamCreateOneWithoutComponentsInput;
  examples?: ExampleCreateManyWithoutComponentInput;
}

export interface ComponentUpdateInput {
  name?: String;
  team?: TeamUpdateOneRequiredWithoutComponentsInput;
  examples?: ExampleUpdateManyWithoutComponentInput;
}

export interface ComponentUpdateManyMutationInput {
  name?: String;
}

export interface ExampleCreateInput {
  name: String;
  component: ComponentCreateOneWithoutExamplesInput;
  renders?: RenderCreateManyWithoutExampleInput;
}

export interface ExampleUpdateInput {
  name?: String;
  component?: ComponentUpdateOneRequiredWithoutExamplesInput;
  renders?: RenderUpdateManyWithoutExampleInput;
}

export interface ExampleUpdateManyMutationInput {
  name?: String;
}

export interface MembershipCreateInput {
  role?: Role;
  user: UserCreateOneWithoutMembershipsInput;
  team: TeamCreateOneWithoutMembershipsInput;
}

export interface MembershipUpdateInput {
  role?: Role;
  user?: UserUpdateOneRequiredWithoutMembershipsInput;
  team?: TeamUpdateOneRequiredWithoutMembershipsInput;
}

export interface MembershipUpdateManyMutationInput {
  role?: Role;
}

export interface RenderCreateInput {
  imageUrl: String;
  example: ExampleCreateOneWithoutRendersInput;
  check?: CheckCreateOneWithoutRendersInput;
}

export interface RenderUpdateInput {
  imageUrl?: String;
  example?: ExampleUpdateOneRequiredWithoutRendersInput;
  check?: CheckUpdateOneWithoutRendersInput;
}

export interface RenderUpdateManyMutationInput {
  imageUrl?: String;
}

export interface RepoCreateInput {
  owner: String;
  name: String;
  checks?: CheckCreateManyWithoutRepoInput;
  team?: TeamCreateOneWithoutReposInput;
}

export interface RepoUpdateInput {
  owner?: String;
  name?: String;
  checks?: CheckUpdateManyWithoutRepoInput;
  team?: TeamUpdateOneWithoutReposInput;
}

export interface RepoUpdateManyMutationInput {
  owner?: String;
  name?: String;
}

export interface TeamCreateInput {
  name: String;
  memberships?: MembershipCreateManyWithoutTeamInput;
  components?: ComponentCreateManyWithoutTeamInput;
  repos?: RepoCreateManyWithoutTeamInput;
}

export interface TeamUpdateInput {
  name?: String;
  memberships?: MembershipUpdateManyWithoutTeamInput;
  components?: ComponentUpdateManyWithoutTeamInput;
  repos?: RepoUpdateManyWithoutTeamInput;
}

export interface TeamUpdateManyMutationInput {
  name?: String;
}

export interface UserUpdateInput {
  email?: String;
  name?: String;
  githubAccessToken?: String;
  figmaAccessToken?: String;
  figmaRefreshToken?: String;
  memberships?: MembershipUpdateManyWithoutUserInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  name?: String;
  githubAccessToken?: String;
  figmaAccessToken?: String;
  figmaRefreshToken?: String;
}

export interface CheckSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CheckWhereInput;
  AND?: CheckSubscriptionWhereInput[] | CheckSubscriptionWhereInput;
  OR?: CheckSubscriptionWhereInput[] | CheckSubscriptionWhereInput;
  NOT?: CheckSubscriptionWhereInput[] | CheckSubscriptionWhereInput;
}

export interface CliAuthSessionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CliAuthSessionWhereInput;
  AND?:
    | CliAuthSessionSubscriptionWhereInput[]
    | CliAuthSessionSubscriptionWhereInput;
  OR?:
    | CliAuthSessionSubscriptionWhereInput[]
    | CliAuthSessionSubscriptionWhereInput;
  NOT?:
    | CliAuthSessionSubscriptionWhereInput[]
    | CliAuthSessionSubscriptionWhereInput;
}

export interface ComponentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ComponentWhereInput;
  AND?: ComponentSubscriptionWhereInput[] | ComponentSubscriptionWhereInput;
  OR?: ComponentSubscriptionWhereInput[] | ComponentSubscriptionWhereInput;
  NOT?: ComponentSubscriptionWhereInput[] | ComponentSubscriptionWhereInput;
}

export interface ExampleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ExampleWhereInput;
  AND?: ExampleSubscriptionWhereInput[] | ExampleSubscriptionWhereInput;
  OR?: ExampleSubscriptionWhereInput[] | ExampleSubscriptionWhereInput;
  NOT?: ExampleSubscriptionWhereInput[] | ExampleSubscriptionWhereInput;
}

export interface MembershipSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MembershipWhereInput;
  AND?: MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput;
  OR?: MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput;
  NOT?: MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput;
}

export interface RenderSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RenderWhereInput;
  AND?: RenderSubscriptionWhereInput[] | RenderSubscriptionWhereInput;
  OR?: RenderSubscriptionWhereInput[] | RenderSubscriptionWhereInput;
  NOT?: RenderSubscriptionWhereInput[] | RenderSubscriptionWhereInput;
}

export interface RepoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RepoWhereInput;
  AND?: RepoSubscriptionWhereInput[] | RepoSubscriptionWhereInput;
  OR?: RepoSubscriptionWhereInput[] | RepoSubscriptionWhereInput;
  NOT?: RepoSubscriptionWhereInput[] | RepoSubscriptionWhereInput;
}

export interface TeamSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TeamWhereInput;
  AND?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  OR?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  NOT?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Check {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  githubCheckId?: Int;
  headBranch: String;
  headSha: String;
}

export interface CheckPromise extends Promise<Check>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  githubCheckId: () => Promise<Int>;
  headBranch: () => Promise<String>;
  headSha: () => Promise<String>;
  renders: <T = FragmentableArray<Render>>(
    args?: {
      where?: RenderWhereInput;
      orderBy?: RenderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  repo: <T = RepoPromise>() => T;
}

export interface CheckSubscription
  extends Promise<AsyncIterator<Check>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  githubCheckId: () => Promise<AsyncIterator<Int>>;
  headBranch: () => Promise<AsyncIterator<String>>;
  headSha: () => Promise<AsyncIterator<String>>;
  renders: <T = Promise<AsyncIterator<RenderSubscription>>>(
    args?: {
      where?: RenderWhereInput;
      orderBy?: RenderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  repo: <T = RepoSubscription>() => T;
}

export interface Render {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  imageUrl: String;
}

export interface RenderPromise extends Promise<Render>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  imageUrl: () => Promise<String>;
  example: <T = ExamplePromise>() => T;
  check: <T = CheckPromise>() => T;
}

export interface RenderSubscription
  extends Promise<AsyncIterator<Render>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  example: <T = ExampleSubscription>() => T;
  check: <T = CheckSubscription>() => T;
}

export interface Example {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface ExamplePromise extends Promise<Example>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  component: <T = ComponentPromise>() => T;
  renders: <T = FragmentableArray<Render>>(
    args?: {
      where?: RenderWhereInput;
      orderBy?: RenderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ExampleSubscription
  extends Promise<AsyncIterator<Example>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  component: <T = ComponentSubscription>() => T;
  renders: <T = Promise<AsyncIterator<RenderSubscription>>>(
    args?: {
      where?: RenderWhereInput;
      orderBy?: RenderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Component {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface ComponentPromise extends Promise<Component>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  team: <T = TeamPromise>() => T;
  examples: <T = FragmentableArray<Example>>(
    args?: {
      where?: ExampleWhereInput;
      orderBy?: ExampleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ComponentSubscription
  extends Promise<AsyncIterator<Component>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  team: <T = TeamSubscription>() => T;
  examples: <T = Promise<AsyncIterator<ExampleSubscription>>>(
    args?: {
      where?: ExampleWhereInput;
      orderBy?: ExampleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Team {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface TeamPromise extends Promise<Team>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  memberships: <T = FragmentableArray<Membership>>(
    args?: {
      where?: MembershipWhereInput;
      orderBy?: MembershipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  components: <T = FragmentableArray<Component>>(
    args?: {
      where?: ComponentWhereInput;
      orderBy?: ComponentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  repos: <T = FragmentableArray<Repo>>(
    args?: {
      where?: RepoWhereInput;
      orderBy?: RepoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TeamSubscription
  extends Promise<AsyncIterator<Team>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  memberships: <T = Promise<AsyncIterator<MembershipSubscription>>>(
    args?: {
      where?: MembershipWhereInput;
      orderBy?: MembershipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  components: <T = Promise<AsyncIterator<ComponentSubscription>>>(
    args?: {
      where?: ComponentWhereInput;
      orderBy?: ComponentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  repos: <T = Promise<AsyncIterator<RepoSubscription>>>(
    args?: {
      where?: RepoWhereInput;
      orderBy?: RepoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Membership {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  role: Role;
}

export interface MembershipPromise extends Promise<Membership>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
  user: <T = UserPromise>() => T;
  team: <T = TeamPromise>() => T;
}

export interface MembershipSubscription
  extends Promise<AsyncIterator<Membership>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
  user: <T = UserSubscription>() => T;
  team: <T = TeamSubscription>() => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  name: String;
  githubAccessToken?: String;
  figmaAccessToken?: String;
  figmaRefreshToken?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  githubAccessToken: () => Promise<String>;
  figmaAccessToken: () => Promise<String>;
  figmaRefreshToken: () => Promise<String>;
  memberships: <T = FragmentableArray<Membership>>(
    args?: {
      where?: MembershipWhereInput;
      orderBy?: MembershipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  githubAccessToken: () => Promise<AsyncIterator<String>>;
  figmaAccessToken: () => Promise<AsyncIterator<String>>;
  figmaRefreshToken: () => Promise<AsyncIterator<String>>;
  memberships: <T = Promise<AsyncIterator<MembershipSubscription>>>(
    args?: {
      where?: MembershipWhereInput;
      orderBy?: MembershipOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Repo {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  owner: String;
  name: String;
}

export interface RepoPromise extends Promise<Repo>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: () => Promise<String>;
  name: () => Promise<String>;
  checks: <T = FragmentableArray<Check>>(
    args?: {
      where?: CheckWhereInput;
      orderBy?: CheckOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  team: <T = TeamPromise>() => T;
}

export interface RepoSubscription
  extends Promise<AsyncIterator<Repo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  checks: <T = Promise<AsyncIterator<CheckSubscription>>>(
    args?: {
      where?: CheckWhereInput;
      orderBy?: CheckOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  team: <T = TeamSubscription>() => T;
}

export interface CheckConnection {
  pageInfo: PageInfo;
  edges: CheckEdge[];
}

export interface CheckConnectionPromise
  extends Promise<CheckConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CheckEdge>>() => T;
  aggregate: <T = AggregateCheckPromise>() => T;
}

export interface CheckConnectionSubscription
  extends Promise<AsyncIterator<CheckConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CheckEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCheckSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CheckEdge {
  node: Check;
  cursor: String;
}

export interface CheckEdgePromise extends Promise<CheckEdge>, Fragmentable {
  node: <T = CheckPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CheckEdgeSubscription
  extends Promise<AsyncIterator<CheckEdge>>,
    Fragmentable {
  node: <T = CheckSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCheck {
  count: Int;
}

export interface AggregateCheckPromise
  extends Promise<AggregateCheck>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCheckSubscription
  extends Promise<AsyncIterator<AggregateCheck>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CliAuthSession {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  expiresAt: DateTimeOutput;
}

export interface CliAuthSessionPromise
  extends Promise<CliAuthSession>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  expiresAt: () => Promise<DateTimeOutput>;
  authenticatedUser: <T = UserPromise>() => T;
}

export interface CliAuthSessionSubscription
  extends Promise<AsyncIterator<CliAuthSession>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  expiresAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  authenticatedUser: <T = UserSubscription>() => T;
}

export interface CliAuthSessionConnection {
  pageInfo: PageInfo;
  edges: CliAuthSessionEdge[];
}

export interface CliAuthSessionConnectionPromise
  extends Promise<CliAuthSessionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CliAuthSessionEdge>>() => T;
  aggregate: <T = AggregateCliAuthSessionPromise>() => T;
}

export interface CliAuthSessionConnectionSubscription
  extends Promise<AsyncIterator<CliAuthSessionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CliAuthSessionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCliAuthSessionSubscription>() => T;
}

export interface CliAuthSessionEdge {
  node: CliAuthSession;
  cursor: String;
}

export interface CliAuthSessionEdgePromise
  extends Promise<CliAuthSessionEdge>,
    Fragmentable {
  node: <T = CliAuthSessionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CliAuthSessionEdgeSubscription
  extends Promise<AsyncIterator<CliAuthSessionEdge>>,
    Fragmentable {
  node: <T = CliAuthSessionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCliAuthSession {
  count: Int;
}

export interface AggregateCliAuthSessionPromise
  extends Promise<AggregateCliAuthSession>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCliAuthSessionSubscription
  extends Promise<AsyncIterator<AggregateCliAuthSession>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ComponentConnection {
  pageInfo: PageInfo;
  edges: ComponentEdge[];
}

export interface ComponentConnectionPromise
  extends Promise<ComponentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ComponentEdge>>() => T;
  aggregate: <T = AggregateComponentPromise>() => T;
}

export interface ComponentConnectionSubscription
  extends Promise<AsyncIterator<ComponentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ComponentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateComponentSubscription>() => T;
}

export interface ComponentEdge {
  node: Component;
  cursor: String;
}

export interface ComponentEdgePromise
  extends Promise<ComponentEdge>,
    Fragmentable {
  node: <T = ComponentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ComponentEdgeSubscription
  extends Promise<AsyncIterator<ComponentEdge>>,
    Fragmentable {
  node: <T = ComponentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComponent {
  count: Int;
}

export interface AggregateComponentPromise
  extends Promise<AggregateComponent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateComponentSubscription
  extends Promise<AsyncIterator<AggregateComponent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ExampleConnection {
  pageInfo: PageInfo;
  edges: ExampleEdge[];
}

export interface ExampleConnectionPromise
  extends Promise<ExampleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ExampleEdge>>() => T;
  aggregate: <T = AggregateExamplePromise>() => T;
}

export interface ExampleConnectionSubscription
  extends Promise<AsyncIterator<ExampleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ExampleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateExampleSubscription>() => T;
}

export interface ExampleEdge {
  node: Example;
  cursor: String;
}

export interface ExampleEdgePromise extends Promise<ExampleEdge>, Fragmentable {
  node: <T = ExamplePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ExampleEdgeSubscription
  extends Promise<AsyncIterator<ExampleEdge>>,
    Fragmentable {
  node: <T = ExampleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateExample {
  count: Int;
}

export interface AggregateExamplePromise
  extends Promise<AggregateExample>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateExampleSubscription
  extends Promise<AsyncIterator<AggregateExample>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MembershipConnection {
  pageInfo: PageInfo;
  edges: MembershipEdge[];
}

export interface MembershipConnectionPromise
  extends Promise<MembershipConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MembershipEdge>>() => T;
  aggregate: <T = AggregateMembershipPromise>() => T;
}

export interface MembershipConnectionSubscription
  extends Promise<AsyncIterator<MembershipConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MembershipEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMembershipSubscription>() => T;
}

export interface MembershipEdge {
  node: Membership;
  cursor: String;
}

export interface MembershipEdgePromise
  extends Promise<MembershipEdge>,
    Fragmentable {
  node: <T = MembershipPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MembershipEdgeSubscription
  extends Promise<AsyncIterator<MembershipEdge>>,
    Fragmentable {
  node: <T = MembershipSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMembership {
  count: Int;
}

export interface AggregateMembershipPromise
  extends Promise<AggregateMembership>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMembershipSubscription
  extends Promise<AsyncIterator<AggregateMembership>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RenderConnection {
  pageInfo: PageInfo;
  edges: RenderEdge[];
}

export interface RenderConnectionPromise
  extends Promise<RenderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RenderEdge>>() => T;
  aggregate: <T = AggregateRenderPromise>() => T;
}

export interface RenderConnectionSubscription
  extends Promise<AsyncIterator<RenderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RenderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRenderSubscription>() => T;
}

export interface RenderEdge {
  node: Render;
  cursor: String;
}

export interface RenderEdgePromise extends Promise<RenderEdge>, Fragmentable {
  node: <T = RenderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RenderEdgeSubscription
  extends Promise<AsyncIterator<RenderEdge>>,
    Fragmentable {
  node: <T = RenderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRender {
  count: Int;
}

export interface AggregateRenderPromise
  extends Promise<AggregateRender>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRenderSubscription
  extends Promise<AsyncIterator<AggregateRender>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RepoConnection {
  pageInfo: PageInfo;
  edges: RepoEdge[];
}

export interface RepoConnectionPromise
  extends Promise<RepoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RepoEdge>>() => T;
  aggregate: <T = AggregateRepoPromise>() => T;
}

export interface RepoConnectionSubscription
  extends Promise<AsyncIterator<RepoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RepoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRepoSubscription>() => T;
}

export interface RepoEdge {
  node: Repo;
  cursor: String;
}

export interface RepoEdgePromise extends Promise<RepoEdge>, Fragmentable {
  node: <T = RepoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RepoEdgeSubscription
  extends Promise<AsyncIterator<RepoEdge>>,
    Fragmentable {
  node: <T = RepoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRepo {
  count: Int;
}

export interface AggregateRepoPromise
  extends Promise<AggregateRepo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRepoSubscription
  extends Promise<AsyncIterator<AggregateRepo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TeamConnection {
  pageInfo: PageInfo;
  edges: TeamEdge[];
}

export interface TeamConnectionPromise
  extends Promise<TeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TeamEdge>>() => T;
  aggregate: <T = AggregateTeamPromise>() => T;
}

export interface TeamConnectionSubscription
  extends Promise<AsyncIterator<TeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeamSubscription>() => T;
}

export interface TeamEdge {
  node: Team;
  cursor: String;
}

export interface TeamEdgePromise extends Promise<TeamEdge>, Fragmentable {
  node: <T = TeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TeamEdgeSubscription
  extends Promise<AsyncIterator<TeamEdge>>,
    Fragmentable {
  node: <T = TeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTeam {
  count: Int;
}

export interface AggregateTeamPromise
  extends Promise<AggregateTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeamSubscription
  extends Promise<AsyncIterator<AggregateTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CheckSubscriptionPayload {
  mutation: MutationType;
  node: Check;
  updatedFields: String[];
  previousValues: CheckPreviousValues;
}

export interface CheckSubscriptionPayloadPromise
  extends Promise<CheckSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CheckPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CheckPreviousValuesPromise>() => T;
}

export interface CheckSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CheckSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CheckSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CheckPreviousValuesSubscription>() => T;
}

export interface CheckPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  githubCheckId?: Int;
  headBranch: String;
  headSha: String;
}

export interface CheckPreviousValuesPromise
  extends Promise<CheckPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  githubCheckId: () => Promise<Int>;
  headBranch: () => Promise<String>;
  headSha: () => Promise<String>;
}

export interface CheckPreviousValuesSubscription
  extends Promise<AsyncIterator<CheckPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  githubCheckId: () => Promise<AsyncIterator<Int>>;
  headBranch: () => Promise<AsyncIterator<String>>;
  headSha: () => Promise<AsyncIterator<String>>;
}

export interface CliAuthSessionSubscriptionPayload {
  mutation: MutationType;
  node: CliAuthSession;
  updatedFields: String[];
  previousValues: CliAuthSessionPreviousValues;
}

export interface CliAuthSessionSubscriptionPayloadPromise
  extends Promise<CliAuthSessionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CliAuthSessionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CliAuthSessionPreviousValuesPromise>() => T;
}

export interface CliAuthSessionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CliAuthSessionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CliAuthSessionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CliAuthSessionPreviousValuesSubscription>() => T;
}

export interface CliAuthSessionPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  expiresAt: DateTimeOutput;
}

export interface CliAuthSessionPreviousValuesPromise
  extends Promise<CliAuthSessionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  expiresAt: () => Promise<DateTimeOutput>;
}

export interface CliAuthSessionPreviousValuesSubscription
  extends Promise<AsyncIterator<CliAuthSessionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  expiresAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ComponentSubscriptionPayload {
  mutation: MutationType;
  node: Component;
  updatedFields: String[];
  previousValues: ComponentPreviousValues;
}

export interface ComponentSubscriptionPayloadPromise
  extends Promise<ComponentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ComponentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ComponentPreviousValuesPromise>() => T;
}

export interface ComponentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ComponentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ComponentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ComponentPreviousValuesSubscription>() => T;
}

export interface ComponentPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface ComponentPreviousValuesPromise
  extends Promise<ComponentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface ComponentPreviousValuesSubscription
  extends Promise<AsyncIterator<ComponentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ExampleSubscriptionPayload {
  mutation: MutationType;
  node: Example;
  updatedFields: String[];
  previousValues: ExamplePreviousValues;
}

export interface ExampleSubscriptionPayloadPromise
  extends Promise<ExampleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ExamplePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ExamplePreviousValuesPromise>() => T;
}

export interface ExampleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ExampleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ExampleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ExamplePreviousValuesSubscription>() => T;
}

export interface ExamplePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface ExamplePreviousValuesPromise
  extends Promise<ExamplePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface ExamplePreviousValuesSubscription
  extends Promise<AsyncIterator<ExamplePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface MembershipSubscriptionPayload {
  mutation: MutationType;
  node: Membership;
  updatedFields: String[];
  previousValues: MembershipPreviousValues;
}

export interface MembershipSubscriptionPayloadPromise
  extends Promise<MembershipSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MembershipPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MembershipPreviousValuesPromise>() => T;
}

export interface MembershipSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MembershipSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MembershipSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MembershipPreviousValuesSubscription>() => T;
}

export interface MembershipPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  role: Role;
}

export interface MembershipPreviousValuesPromise
  extends Promise<MembershipPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
}

export interface MembershipPreviousValuesSubscription
  extends Promise<AsyncIterator<MembershipPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface RenderSubscriptionPayload {
  mutation: MutationType;
  node: Render;
  updatedFields: String[];
  previousValues: RenderPreviousValues;
}

export interface RenderSubscriptionPayloadPromise
  extends Promise<RenderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RenderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RenderPreviousValuesPromise>() => T;
}

export interface RenderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RenderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RenderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RenderPreviousValuesSubscription>() => T;
}

export interface RenderPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  imageUrl: String;
}

export interface RenderPreviousValuesPromise
  extends Promise<RenderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  imageUrl: () => Promise<String>;
}

export interface RenderPreviousValuesSubscription
  extends Promise<AsyncIterator<RenderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
}

export interface RepoSubscriptionPayload {
  mutation: MutationType;
  node: Repo;
  updatedFields: String[];
  previousValues: RepoPreviousValues;
}

export interface RepoSubscriptionPayloadPromise
  extends Promise<RepoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RepoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RepoPreviousValuesPromise>() => T;
}

export interface RepoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RepoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RepoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RepoPreviousValuesSubscription>() => T;
}

export interface RepoPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  owner: String;
  name: String;
}

export interface RepoPreviousValuesPromise
  extends Promise<RepoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: () => Promise<String>;
  name: () => Promise<String>;
}

export interface RepoPreviousValuesSubscription
  extends Promise<AsyncIterator<RepoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface TeamSubscriptionPayload {
  mutation: MutationType;
  node: Team;
  updatedFields: String[];
  previousValues: TeamPreviousValues;
}

export interface TeamSubscriptionPayloadPromise
  extends Promise<TeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TeamPreviousValuesPromise>() => T;
}

export interface TeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TeamPreviousValuesSubscription>() => T;
}

export interface TeamPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface TeamPreviousValuesPromise
  extends Promise<TeamPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface TeamPreviousValuesSubscription
  extends Promise<AsyncIterator<TeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  name: String;
  githubAccessToken?: String;
  figmaAccessToken?: String;
  figmaRefreshToken?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  githubAccessToken: () => Promise<String>;
  figmaAccessToken: () => Promise<String>;
  figmaRefreshToken: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  githubAccessToken: () => Promise<AsyncIterator<String>>;
  figmaAccessToken: () => Promise<AsyncIterator<String>>;
  figmaRefreshToken: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Membership",
    embedded: false
  },
  {
    name: "Team",
    embedded: false
  },
  {
    name: "Component",
    embedded: false
  },
  {
    name: "Example",
    embedded: false
  },
  {
    name: "Render",
    embedded: false
  },
  {
    name: "Check",
    embedded: false
  },
  {
    name: "Repo",
    embedded: false
  },
  {
    name: "CliAuthSession",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();

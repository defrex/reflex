// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  check: (where?: CheckWhereInput) => Promise<boolean>;
  cliAuthSession: (where?: CliAuthSessionWhereInput) => Promise<boolean>;
  component: (where?: ComponentWhereInput) => Promise<boolean>;
  membership: (where?: MembershipWhereInput) => Promise<boolean>;
  render: (where?: RenderWhereInput) => Promise<boolean>;
  repo: (where?: RepoWhereInput) => Promise<boolean>;
  sample: (where?: SampleWhereInput) => Promise<boolean>;
  team: (where?: TeamWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  check: (where: CheckWhereUniqueInput) => CheckNullablePromise;
  checks: (args?: {
    where?: CheckWhereInput;
    orderBy?: CheckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Check>;
  checksConnection: (args?: {
    where?: CheckWhereInput;
    orderBy?: CheckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CheckConnectionPromise;
  cliAuthSession: (
    where: CliAuthSessionWhereUniqueInput
  ) => CliAuthSessionNullablePromise;
  cliAuthSessions: (args?: {
    where?: CliAuthSessionWhereInput;
    orderBy?: CliAuthSessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CliAuthSession>;
  cliAuthSessionsConnection: (args?: {
    where?: CliAuthSessionWhereInput;
    orderBy?: CliAuthSessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CliAuthSessionConnectionPromise;
  component: (where: ComponentWhereUniqueInput) => ComponentNullablePromise;
  components: (args?: {
    where?: ComponentWhereInput;
    orderBy?: ComponentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Component>;
  componentsConnection: (args?: {
    where?: ComponentWhereInput;
    orderBy?: ComponentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ComponentConnectionPromise;
  membership: (where: MembershipWhereUniqueInput) => MembershipNullablePromise;
  memberships: (args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Membership>;
  membershipsConnection: (args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MembershipConnectionPromise;
  render: (where: RenderWhereUniqueInput) => RenderNullablePromise;
  renders: (args?: {
    where?: RenderWhereInput;
    orderBy?: RenderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Render>;
  rendersConnection: (args?: {
    where?: RenderWhereInput;
    orderBy?: RenderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RenderConnectionPromise;
  repo: (where: RepoWhereUniqueInput) => RepoNullablePromise;
  repoes: (args?: {
    where?: RepoWhereInput;
    orderBy?: RepoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Repo>;
  repoesConnection: (args?: {
    where?: RepoWhereInput;
    orderBy?: RepoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RepoConnectionPromise;
  sample: (where: SampleWhereUniqueInput) => SampleNullablePromise;
  samples: (args?: {
    where?: SampleWhereInput;
    orderBy?: SampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Sample>;
  samplesConnection: (args?: {
    where?: SampleWhereInput;
    orderBy?: SampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SampleConnectionPromise;
  team: (where: TeamWhereUniqueInput) => TeamNullablePromise;
  teams: (args?: {
    where?: TeamWhereInput;
    orderBy?: TeamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Team>;
  teamsConnection: (args?: {
    where?: TeamWhereInput;
    orderBy?: TeamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TeamConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCheck: (data: CheckCreateInput) => CheckPromise;
  updateCheck: (args: {
    data: CheckUpdateInput;
    where: CheckWhereUniqueInput;
  }) => CheckPromise;
  updateManyChecks: (args: {
    data: CheckUpdateManyMutationInput;
    where?: CheckWhereInput;
  }) => BatchPayloadPromise;
  upsertCheck: (args: {
    where: CheckWhereUniqueInput;
    create: CheckCreateInput;
    update: CheckUpdateInput;
  }) => CheckPromise;
  deleteCheck: (where: CheckWhereUniqueInput) => CheckPromise;
  deleteManyChecks: (where?: CheckWhereInput) => BatchPayloadPromise;
  createCliAuthSession: (
    data: CliAuthSessionCreateInput
  ) => CliAuthSessionPromise;
  updateCliAuthSession: (args: {
    data: CliAuthSessionUpdateInput;
    where: CliAuthSessionWhereUniqueInput;
  }) => CliAuthSessionPromise;
  updateManyCliAuthSessions: (args: {
    data: CliAuthSessionUpdateManyMutationInput;
    where?: CliAuthSessionWhereInput;
  }) => BatchPayloadPromise;
  upsertCliAuthSession: (args: {
    where: CliAuthSessionWhereUniqueInput;
    create: CliAuthSessionCreateInput;
    update: CliAuthSessionUpdateInput;
  }) => CliAuthSessionPromise;
  deleteCliAuthSession: (
    where: CliAuthSessionWhereUniqueInput
  ) => CliAuthSessionPromise;
  deleteManyCliAuthSessions: (
    where?: CliAuthSessionWhereInput
  ) => BatchPayloadPromise;
  createComponent: (data: ComponentCreateInput) => ComponentPromise;
  updateComponent: (args: {
    data: ComponentUpdateInput;
    where: ComponentWhereUniqueInput;
  }) => ComponentPromise;
  updateManyComponents: (args: {
    data: ComponentUpdateManyMutationInput;
    where?: ComponentWhereInput;
  }) => BatchPayloadPromise;
  upsertComponent: (args: {
    where: ComponentWhereUniqueInput;
    create: ComponentCreateInput;
    update: ComponentUpdateInput;
  }) => ComponentPromise;
  deleteComponent: (where: ComponentWhereUniqueInput) => ComponentPromise;
  deleteManyComponents: (where?: ComponentWhereInput) => BatchPayloadPromise;
  createMembership: (data: MembershipCreateInput) => MembershipPromise;
  updateMembership: (args: {
    data: MembershipUpdateInput;
    where: MembershipWhereUniqueInput;
  }) => MembershipPromise;
  updateManyMemberships: (args: {
    data: MembershipUpdateManyMutationInput;
    where?: MembershipWhereInput;
  }) => BatchPayloadPromise;
  upsertMembership: (args: {
    where: MembershipWhereUniqueInput;
    create: MembershipCreateInput;
    update: MembershipUpdateInput;
  }) => MembershipPromise;
  deleteMembership: (where: MembershipWhereUniqueInput) => MembershipPromise;
  deleteManyMemberships: (where?: MembershipWhereInput) => BatchPayloadPromise;
  createRender: (data: RenderCreateInput) => RenderPromise;
  updateRender: (args: {
    data: RenderUpdateInput;
    where: RenderWhereUniqueInput;
  }) => RenderPromise;
  updateManyRenders: (args: {
    data: RenderUpdateManyMutationInput;
    where?: RenderWhereInput;
  }) => BatchPayloadPromise;
  upsertRender: (args: {
    where: RenderWhereUniqueInput;
    create: RenderCreateInput;
    update: RenderUpdateInput;
  }) => RenderPromise;
  deleteRender: (where: RenderWhereUniqueInput) => RenderPromise;
  deleteManyRenders: (where?: RenderWhereInput) => BatchPayloadPromise;
  createRepo: (data: RepoCreateInput) => RepoPromise;
  updateRepo: (args: {
    data: RepoUpdateInput;
    where: RepoWhereUniqueInput;
  }) => RepoPromise;
  updateManyRepoes: (args: {
    data: RepoUpdateManyMutationInput;
    where?: RepoWhereInput;
  }) => BatchPayloadPromise;
  upsertRepo: (args: {
    where: RepoWhereUniqueInput;
    create: RepoCreateInput;
    update: RepoUpdateInput;
  }) => RepoPromise;
  deleteRepo: (where: RepoWhereUniqueInput) => RepoPromise;
  deleteManyRepoes: (where?: RepoWhereInput) => BatchPayloadPromise;
  createSample: (data: SampleCreateInput) => SamplePromise;
  updateSample: (args: {
    data: SampleUpdateInput;
    where: SampleWhereUniqueInput;
  }) => SamplePromise;
  updateManySamples: (args: {
    data: SampleUpdateManyMutationInput;
    where?: SampleWhereInput;
  }) => BatchPayloadPromise;
  upsertSample: (args: {
    where: SampleWhereUniqueInput;
    create: SampleCreateInput;
    update: SampleUpdateInput;
  }) => SamplePromise;
  deleteSample: (where: SampleWhereUniqueInput) => SamplePromise;
  deleteManySamples: (where?: SampleWhereInput) => BatchPayloadPromise;
  createTeam: (data: TeamCreateInput) => TeamPromise;
  updateTeam: (args: {
    data: TeamUpdateInput;
    where: TeamWhereUniqueInput;
  }) => TeamPromise;
  updateManyTeams: (args: {
    data: TeamUpdateManyMutationInput;
    where?: TeamWhereInput;
  }) => BatchPayloadPromise;
  upsertTeam: (args: {
    where: TeamWhereUniqueInput;
    create: TeamCreateInput;
    update: TeamUpdateInput;
  }) => TeamPromise;
  deleteTeam: (where: TeamWhereUniqueInput) => TeamPromise;
  deleteManyTeams: (where?: TeamWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  check: (
    where?: CheckSubscriptionWhereInput
  ) => CheckSubscriptionPayloadSubscription;
  cliAuthSession: (
    where?: CliAuthSessionSubscriptionWhereInput
  ) => CliAuthSessionSubscriptionPayloadSubscription;
  component: (
    where?: ComponentSubscriptionWhereInput
  ) => ComponentSubscriptionPayloadSubscription;
  membership: (
    where?: MembershipSubscriptionWhereInput
  ) => MembershipSubscriptionPayloadSubscription;
  render: (
    where?: RenderSubscriptionWhereInput
  ) => RenderSubscriptionPayloadSubscription;
  repo: (
    where?: RepoSubscriptionWhereInput
  ) => RepoSubscriptionPayloadSubscription;
  sample: (
    where?: SampleSubscriptionWhereInput
  ) => SampleSubscriptionPayloadSubscription;
  team: (
    where?: TeamSubscriptionWhereInput
  ) => TeamSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CheckOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "githubCheckId_ASC"
  | "githubCheckId_DESC"
  | "branch_ASC"
  | "branch_DESC"
  | "commit_ASC"
  | "commit_DESC";

export type RenderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "html_ASC"
  | "html_DESC"
  | "branch_ASC"
  | "branch_DESC"
  | "commit_ASC"
  | "commit_DESC";

export type Role = "MEMBER" | "ADMIN";

export type MembershipOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "role_ASC"
  | "role_DESC";

export type ComponentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type RepoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "owner_ASC"
  | "owner_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type SampleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type CliAuthSessionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "expiresAt_ASC"
  | "expiresAt_DESC";

export type TeamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "githubAccessToken_ASC"
  | "githubAccessToken_DESC"
  | "figmaAccessToken_ASC"
  | "figmaAccessToken_DESC"
  | "figmaRefreshToken_ASC"
  | "figmaRefreshToken_DESC";

export interface MembershipUpdateManyDataInput {
  role?: Maybe<Role>;
}

export type CheckWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  githubCheckId?: Maybe<Int>;
}>;

export interface CheckUpdateWithoutRepoDataInput {
  githubCheckId?: Maybe<Int>;
  branch?: Maybe<String>;
  commit?: Maybe<String>;
  renders?: Maybe<RenderUpdateManyWithoutCheckInput>;
}

export interface RepoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<String>;
  owner_not?: Maybe<String>;
  owner_in?: Maybe<String[] | String>;
  owner_not_in?: Maybe<String[] | String>;
  owner_lt?: Maybe<String>;
  owner_lte?: Maybe<String>;
  owner_gt?: Maybe<String>;
  owner_gte?: Maybe<String>;
  owner_contains?: Maybe<String>;
  owner_not_contains?: Maybe<String>;
  owner_starts_with?: Maybe<String>;
  owner_not_starts_with?: Maybe<String>;
  owner_ends_with?: Maybe<String>;
  owner_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  checks_every?: Maybe<CheckWhereInput>;
  checks_some?: Maybe<CheckWhereInput>;
  checks_none?: Maybe<CheckWhereInput>;
  team?: Maybe<TeamWhereInput>;
  AND?: Maybe<RepoWhereInput[] | RepoWhereInput>;
  OR?: Maybe<RepoWhereInput[] | RepoWhereInput>;
  NOT?: Maybe<RepoWhereInput[] | RepoWhereInput>;
}

export interface CheckUpsertWithWhereUniqueWithoutRepoInput {
  where: CheckWhereUniqueInput;
  update: CheckUpdateWithoutRepoDataInput;
  create: CheckCreateWithoutRepoInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  githubAccessToken?: Maybe<String>;
  githubAccessToken_not?: Maybe<String>;
  githubAccessToken_in?: Maybe<String[] | String>;
  githubAccessToken_not_in?: Maybe<String[] | String>;
  githubAccessToken_lt?: Maybe<String>;
  githubAccessToken_lte?: Maybe<String>;
  githubAccessToken_gt?: Maybe<String>;
  githubAccessToken_gte?: Maybe<String>;
  githubAccessToken_contains?: Maybe<String>;
  githubAccessToken_not_contains?: Maybe<String>;
  githubAccessToken_starts_with?: Maybe<String>;
  githubAccessToken_not_starts_with?: Maybe<String>;
  githubAccessToken_ends_with?: Maybe<String>;
  githubAccessToken_not_ends_with?: Maybe<String>;
  figmaAccessToken?: Maybe<String>;
  figmaAccessToken_not?: Maybe<String>;
  figmaAccessToken_in?: Maybe<String[] | String>;
  figmaAccessToken_not_in?: Maybe<String[] | String>;
  figmaAccessToken_lt?: Maybe<String>;
  figmaAccessToken_lte?: Maybe<String>;
  figmaAccessToken_gt?: Maybe<String>;
  figmaAccessToken_gte?: Maybe<String>;
  figmaAccessToken_contains?: Maybe<String>;
  figmaAccessToken_not_contains?: Maybe<String>;
  figmaAccessToken_starts_with?: Maybe<String>;
  figmaAccessToken_not_starts_with?: Maybe<String>;
  figmaAccessToken_ends_with?: Maybe<String>;
  figmaAccessToken_not_ends_with?: Maybe<String>;
  figmaRefreshToken?: Maybe<String>;
  figmaRefreshToken_not?: Maybe<String>;
  figmaRefreshToken_in?: Maybe<String[] | String>;
  figmaRefreshToken_not_in?: Maybe<String[] | String>;
  figmaRefreshToken_lt?: Maybe<String>;
  figmaRefreshToken_lte?: Maybe<String>;
  figmaRefreshToken_gt?: Maybe<String>;
  figmaRefreshToken_gte?: Maybe<String>;
  figmaRefreshToken_contains?: Maybe<String>;
  figmaRefreshToken_not_contains?: Maybe<String>;
  figmaRefreshToken_starts_with?: Maybe<String>;
  figmaRefreshToken_not_starts_with?: Maybe<String>;
  figmaRefreshToken_ends_with?: Maybe<String>;
  figmaRefreshToken_not_ends_with?: Maybe<String>;
  memberships_every?: Maybe<MembershipWhereInput>;
  memberships_some?: Maybe<MembershipWhereInput>;
  memberships_none?: Maybe<MembershipWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface RenderCreateWithoutSampleInput {
  id?: Maybe<ID_Input>;
  imageUrl?: Maybe<String>;
  html: String;
  branch: String;
  commit: String;
  check?: Maybe<CheckCreateOneWithoutRendersInput>;
}

export interface TeamCreateOneWithoutMembershipsInput {
  create?: Maybe<TeamCreateWithoutMembershipsInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface CheckCreateOneWithoutRendersInput {
  create?: Maybe<CheckCreateWithoutRendersInput>;
  connect?: Maybe<CheckWhereUniqueInput>;
}

export interface CheckScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  githubCheckId?: Maybe<Int>;
  githubCheckId_not?: Maybe<Int>;
  githubCheckId_in?: Maybe<Int[] | Int>;
  githubCheckId_not_in?: Maybe<Int[] | Int>;
  githubCheckId_lt?: Maybe<Int>;
  githubCheckId_lte?: Maybe<Int>;
  githubCheckId_gt?: Maybe<Int>;
  githubCheckId_gte?: Maybe<Int>;
  branch?: Maybe<String>;
  branch_not?: Maybe<String>;
  branch_in?: Maybe<String[] | String>;
  branch_not_in?: Maybe<String[] | String>;
  branch_lt?: Maybe<String>;
  branch_lte?: Maybe<String>;
  branch_gt?: Maybe<String>;
  branch_gte?: Maybe<String>;
  branch_contains?: Maybe<String>;
  branch_not_contains?: Maybe<String>;
  branch_starts_with?: Maybe<String>;
  branch_not_starts_with?: Maybe<String>;
  branch_ends_with?: Maybe<String>;
  branch_not_ends_with?: Maybe<String>;
  commit?: Maybe<String>;
  commit_not?: Maybe<String>;
  commit_in?: Maybe<String[] | String>;
  commit_not_in?: Maybe<String[] | String>;
  commit_lt?: Maybe<String>;
  commit_lte?: Maybe<String>;
  commit_gt?: Maybe<String>;
  commit_gte?: Maybe<String>;
  commit_contains?: Maybe<String>;
  commit_not_contains?: Maybe<String>;
  commit_starts_with?: Maybe<String>;
  commit_not_starts_with?: Maybe<String>;
  commit_ends_with?: Maybe<String>;
  commit_not_ends_with?: Maybe<String>;
  AND?: Maybe<CheckScalarWhereInput[] | CheckScalarWhereInput>;
  OR?: Maybe<CheckScalarWhereInput[] | CheckScalarWhereInput>;
  NOT?: Maybe<CheckScalarWhereInput[] | CheckScalarWhereInput>;
}

export interface CheckCreateWithoutRendersInput {
  id?: Maybe<ID_Input>;
  githubCheckId?: Maybe<Int>;
  branch: String;
  commit: String;
  repo: RepoCreateOneWithoutChecksInput;
}

export interface MembershipWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  user?: Maybe<UserWhereInput>;
  team?: Maybe<TeamWhereInput>;
  AND?: Maybe<MembershipWhereInput[] | MembershipWhereInput>;
  OR?: Maybe<MembershipWhereInput[] | MembershipWhereInput>;
  NOT?: Maybe<MembershipWhereInput[] | MembershipWhereInput>;
}

export interface CheckUpdateInput {
  githubCheckId?: Maybe<Int>;
  branch?: Maybe<String>;
  commit?: Maybe<String>;
  renders?: Maybe<RenderUpdateManyWithoutCheckInput>;
  repo?: Maybe<RepoUpdateOneRequiredWithoutChecksInput>;
}

export interface SampleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SampleWhereInput>;
  AND?: Maybe<SampleSubscriptionWhereInput[] | SampleSubscriptionWhereInput>;
  OR?: Maybe<SampleSubscriptionWhereInput[] | SampleSubscriptionWhereInput>;
  NOT?: Maybe<SampleSubscriptionWhereInput[] | SampleSubscriptionWhereInput>;
}

export interface RenderUpdateManyWithoutCheckInput {
  create?: Maybe<
    RenderCreateWithoutCheckInput[] | RenderCreateWithoutCheckInput
  >;
  delete?: Maybe<RenderWhereUniqueInput[] | RenderWhereUniqueInput>;
  connect?: Maybe<RenderWhereUniqueInput[] | RenderWhereUniqueInput>;
  set?: Maybe<RenderWhereUniqueInput[] | RenderWhereUniqueInput>;
  disconnect?: Maybe<RenderWhereUniqueInput[] | RenderWhereUniqueInput>;
  update?: Maybe<
    | RenderUpdateWithWhereUniqueWithoutCheckInput[]
    | RenderUpdateWithWhereUniqueWithoutCheckInput
  >;
  upsert?: Maybe<
    | RenderUpsertWithWhereUniqueWithoutCheckInput[]
    | RenderUpsertWithWhereUniqueWithoutCheckInput
  >;
  deleteMany?: Maybe<RenderScalarWhereInput[] | RenderScalarWhereInput>;
  updateMany?: Maybe<
    | RenderUpdateManyWithWhereNestedInput[]
    | RenderUpdateManyWithWhereNestedInput
  >;
}

export interface ComponentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  team?: Maybe<TeamWhereInput>;
  samples_every?: Maybe<SampleWhereInput>;
  samples_some?: Maybe<SampleWhereInput>;
  samples_none?: Maybe<SampleWhereInput>;
  AND?: Maybe<ComponentWhereInput[] | ComponentWhereInput>;
  OR?: Maybe<ComponentWhereInput[] | ComponentWhereInput>;
  NOT?: Maybe<ComponentWhereInput[] | ComponentWhereInput>;
}

export interface RenderUpdateWithWhereUniqueWithoutCheckInput {
  where: RenderWhereUniqueInput;
  data: RenderUpdateWithoutCheckDataInput;
}

export interface SampleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  component?: Maybe<ComponentWhereInput>;
  renders_every?: Maybe<RenderWhereInput>;
  renders_some?: Maybe<RenderWhereInput>;
  renders_none?: Maybe<RenderWhereInput>;
  AND?: Maybe<SampleWhereInput[] | SampleWhereInput>;
  OR?: Maybe<SampleWhereInput[] | SampleWhereInput>;
  NOT?: Maybe<SampleWhereInput[] | SampleWhereInput>;
}

export interface RenderUpdateWithoutCheckDataInput {
  imageUrl?: Maybe<String>;
  html?: Maybe<String>;
  branch?: Maybe<String>;
  commit?: Maybe<String>;
  sample?: Maybe<SampleUpdateOneRequiredWithoutRendersInput>;
}

export interface RenderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RenderWhereInput>;
  AND?: Maybe<RenderSubscriptionWhereInput[] | RenderSubscriptionWhereInput>;
  OR?: Maybe<RenderSubscriptionWhereInput[] | RenderSubscriptionWhereInput>;
  NOT?: Maybe<RenderSubscriptionWhereInput[] | RenderSubscriptionWhereInput>;
}

export interface SampleUpdateOneRequiredWithoutRendersInput {
  create?: Maybe<SampleCreateWithoutRendersInput>;
  update?: Maybe<SampleUpdateWithoutRendersDataInput>;
  upsert?: Maybe<SampleUpsertWithoutRendersInput>;
  connect?: Maybe<SampleWhereUniqueInput>;
}

export interface ComponentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ComponentWhereInput>;
  AND?: Maybe<
    ComponentSubscriptionWhereInput[] | ComponentSubscriptionWhereInput
  >;
  OR?: Maybe<
    ComponentSubscriptionWhereInput[] | ComponentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ComponentSubscriptionWhereInput[] | ComponentSubscriptionWhereInput
  >;
}

export interface SampleUpdateWithoutRendersDataInput {
  name?: Maybe<String>;
  component?: Maybe<ComponentUpdateOneRequiredWithoutSamplesInput>;
}

export interface CheckSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CheckWhereInput>;
  AND?: Maybe<CheckSubscriptionWhereInput[] | CheckSubscriptionWhereInput>;
  OR?: Maybe<CheckSubscriptionWhereInput[] | CheckSubscriptionWhereInput>;
  NOT?: Maybe<CheckSubscriptionWhereInput[] | CheckSubscriptionWhereInput>;
}

export interface ComponentUpdateOneRequiredWithoutSamplesInput {
  create?: Maybe<ComponentCreateWithoutSamplesInput>;
  update?: Maybe<ComponentUpdateWithoutSamplesDataInput>;
  upsert?: Maybe<ComponentUpsertWithoutSamplesInput>;
  connect?: Maybe<ComponentWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  githubAccessToken?: Maybe<String>;
  figmaAccessToken?: Maybe<String>;
  figmaRefreshToken?: Maybe<String>;
}

export interface ComponentUpdateWithoutSamplesDataInput {
  name?: Maybe<String>;
  team?: Maybe<TeamUpdateOneRequiredWithoutComponentsInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  githubAccessToken?: Maybe<String>;
  figmaAccessToken?: Maybe<String>;
  figmaRefreshToken?: Maybe<String>;
  memberships?: Maybe<MembershipUpdateManyWithoutUserInput>;
}

export interface TeamUpdateOneRequiredWithoutComponentsInput {
  create?: Maybe<TeamCreateWithoutComponentsInput>;
  update?: Maybe<TeamUpdateWithoutComponentsDataInput>;
  upsert?: Maybe<TeamUpsertWithoutComponentsInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface TeamUpdateInput {
  name?: Maybe<String>;
  memberships?: Maybe<MembershipUpdateManyWithoutTeamInput>;
  components?: Maybe<ComponentUpdateManyWithoutTeamInput>;
  repos?: Maybe<RepoUpdateManyWithoutTeamInput>;
}

export interface TeamUpdateWithoutComponentsDataInput {
  name?: Maybe<String>;
  memberships?: Maybe<MembershipUpdateManyWithoutTeamInput>;
  repos?: Maybe<RepoUpdateManyWithoutTeamInput>;
}

export type ComponentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MembershipUpdateManyWithoutTeamInput {
  create?: Maybe<
    MembershipCreateWithoutTeamInput[] | MembershipCreateWithoutTeamInput
  >;
  delete?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  connect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  set?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  disconnect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  update?: Maybe<
    | MembershipUpdateWithWhereUniqueWithoutTeamInput[]
    | MembershipUpdateWithWhereUniqueWithoutTeamInput
  >;
  upsert?: Maybe<
    | MembershipUpsertWithWhereUniqueWithoutTeamInput[]
    | MembershipUpsertWithWhereUniqueWithoutTeamInput
  >;
  deleteMany?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
  updateMany?: Maybe<
    | MembershipUpdateManyWithWhereNestedInput[]
    | MembershipUpdateManyWithWhereNestedInput
  >;
}

export interface SampleUpdateInput {
  name?: Maybe<String>;
  component?: Maybe<ComponentUpdateOneRequiredWithoutSamplesInput>;
  renders?: Maybe<RenderUpdateManyWithoutSampleInput>;
}

export interface MembershipUpdateWithWhereUniqueWithoutTeamInput {
  where: MembershipWhereUniqueInput;
  data: MembershipUpdateWithoutTeamDataInput;
}

export type MembershipWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MembershipUpdateWithoutTeamDataInput {
  role?: Maybe<Role>;
  user?: Maybe<UserUpdateOneRequiredWithoutMembershipsInput>;
}

export interface RepoUpdateInput {
  owner?: Maybe<String>;
  name?: Maybe<String>;
  checks?: Maybe<CheckUpdateManyWithoutRepoInput>;
  team?: Maybe<TeamUpdateOneWithoutReposInput>;
}

export interface UserUpdateOneRequiredWithoutMembershipsInput {
  create?: Maybe<UserCreateWithoutMembershipsInput>;
  update?: Maybe<UserUpdateWithoutMembershipsDataInput>;
  upsert?: Maybe<UserUpsertWithoutMembershipsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type RenderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateWithoutMembershipsDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  githubAccessToken?: Maybe<String>;
  figmaAccessToken?: Maybe<String>;
  figmaRefreshToken?: Maybe<String>;
}

export interface RenderUpdateInput {
  imageUrl?: Maybe<String>;
  html?: Maybe<String>;
  branch?: Maybe<String>;
  commit?: Maybe<String>;
  sample?: Maybe<SampleUpdateOneRequiredWithoutRendersInput>;
  check?: Maybe<CheckUpdateOneWithoutRendersInput>;
}

export interface UserUpsertWithoutMembershipsInput {
  update: UserUpdateWithoutMembershipsDataInput;
  create: UserCreateWithoutMembershipsInput;
}

export type RepoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MembershipUpsertWithWhereUniqueWithoutTeamInput {
  where: MembershipWhereUniqueInput;
  update: MembershipUpdateWithoutTeamDataInput;
  create: MembershipCreateWithoutTeamInput;
}

export interface MembershipUpdateInput {
  role?: Maybe<Role>;
  user?: Maybe<UserUpdateOneRequiredWithoutMembershipsInput>;
  team?: Maybe<TeamUpdateOneRequiredWithoutMembershipsInput>;
}

export interface MembershipScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  AND?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
  OR?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
  NOT?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
}

export type SampleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MembershipUpdateManyWithWhereNestedInput {
  where: MembershipScalarWhereInput;
  data: MembershipUpdateManyDataInput;
}

export interface ComponentUpdateInput {
  name?: Maybe<String>;
  team?: Maybe<TeamUpdateOneRequiredWithoutComponentsInput>;
  samples?: Maybe<SampleUpdateManyWithoutComponentInput>;
}

export interface MembershipUpdateManyWithoutUserInput {
  create?: Maybe<
    MembershipCreateWithoutUserInput[] | MembershipCreateWithoutUserInput
  >;
  delete?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  connect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  set?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  disconnect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  update?: Maybe<
    | MembershipUpdateWithWhereUniqueWithoutUserInput[]
    | MembershipUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | MembershipUpsertWithWhereUniqueWithoutUserInput[]
    | MembershipUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
  updateMany?: Maybe<
    | MembershipUpdateManyWithWhereNestedInput[]
    | MembershipUpdateManyWithWhereNestedInput
  >;
}

export type TeamWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RepoUpdateManyWithoutTeamInput {
  create?: Maybe<RepoCreateWithoutTeamInput[] | RepoCreateWithoutTeamInput>;
  delete?: Maybe<RepoWhereUniqueInput[] | RepoWhereUniqueInput>;
  connect?: Maybe<RepoWhereUniqueInput[] | RepoWhereUniqueInput>;
  set?: Maybe<RepoWhereUniqueInput[] | RepoWhereUniqueInput>;
  disconnect?: Maybe<RepoWhereUniqueInput[] | RepoWhereUniqueInput>;
  update?: Maybe<
    | RepoUpdateWithWhereUniqueWithoutTeamInput[]
    | RepoUpdateWithWhereUniqueWithoutTeamInput
  >;
  upsert?: Maybe<
    | RepoUpsertWithWhereUniqueWithoutTeamInput[]
    | RepoUpsertWithWhereUniqueWithoutTeamInput
  >;
  deleteMany?: Maybe<RepoScalarWhereInput[] | RepoScalarWhereInput>;
  updateMany?: Maybe<
    RepoUpdateManyWithWhereNestedInput[] | RepoUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface RepoUpdateWithWhereUniqueWithoutTeamInput {
  where: RepoWhereUniqueInput;
  data: RepoUpdateWithoutTeamDataInput;
}

export interface TeamUpsertWithoutMembershipsInput {
  update: TeamUpdateWithoutMembershipsDataInput;
  create: TeamCreateWithoutMembershipsInput;
}

export interface RepoUpdateWithoutTeamDataInput {
  owner?: Maybe<String>;
  name?: Maybe<String>;
  checks?: Maybe<CheckUpdateManyWithoutRepoInput>;
}

export interface TeamUpdateWithoutMembershipsDataInput {
  name?: Maybe<String>;
  components?: Maybe<ComponentUpdateManyWithoutTeamInput>;
  repos?: Maybe<RepoUpdateManyWithoutTeamInput>;
}

export interface CheckUpdateManyWithoutRepoInput {
  create?: Maybe<CheckCreateWithoutRepoInput[] | CheckCreateWithoutRepoInput>;
  delete?: Maybe<CheckWhereUniqueInput[] | CheckWhereUniqueInput>;
  connect?: Maybe<CheckWhereUniqueInput[] | CheckWhereUniqueInput>;
  set?: Maybe<CheckWhereUniqueInput[] | CheckWhereUniqueInput>;
  disconnect?: Maybe<CheckWhereUniqueInput[] | CheckWhereUniqueInput>;
  update?: Maybe<
    | CheckUpdateWithWhereUniqueWithoutRepoInput[]
    | CheckUpdateWithWhereUniqueWithoutRepoInput
  >;
  upsert?: Maybe<
    | CheckUpsertWithWhereUniqueWithoutRepoInput[]
    | CheckUpsertWithWhereUniqueWithoutRepoInput
  >;
  deleteMany?: Maybe<CheckScalarWhereInput[] | CheckScalarWhereInput>;
  updateMany?: Maybe<
    CheckUpdateManyWithWhereNestedInput[] | CheckUpdateManyWithWhereNestedInput
  >;
}

export interface MembershipUpdateWithoutUserDataInput {
  role?: Maybe<Role>;
  team?: Maybe<TeamUpdateOneRequiredWithoutMembershipsInput>;
}

export interface CheckUpdateWithWhereUniqueWithoutRepoInput {
  where: CheckWhereUniqueInput;
  data: CheckUpdateWithoutRepoDataInput;
}

export interface RenderCreateManyWithoutCheckInput {
  create?: Maybe<
    RenderCreateWithoutCheckInput[] | RenderCreateWithoutCheckInput
  >;
  connect?: Maybe<RenderWhereUniqueInput[] | RenderWhereUniqueInput>;
}

export interface CheckWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  githubCheckId?: Maybe<Int>;
  githubCheckId_not?: Maybe<Int>;
  githubCheckId_in?: Maybe<Int[] | Int>;
  githubCheckId_not_in?: Maybe<Int[] | Int>;
  githubCheckId_lt?: Maybe<Int>;
  githubCheckId_lte?: Maybe<Int>;
  githubCheckId_gt?: Maybe<Int>;
  githubCheckId_gte?: Maybe<Int>;
  branch?: Maybe<String>;
  branch_not?: Maybe<String>;
  branch_in?: Maybe<String[] | String>;
  branch_not_in?: Maybe<String[] | String>;
  branch_lt?: Maybe<String>;
  branch_lte?: Maybe<String>;
  branch_gt?: Maybe<String>;
  branch_gte?: Maybe<String>;
  branch_contains?: Maybe<String>;
  branch_not_contains?: Maybe<String>;
  branch_starts_with?: Maybe<String>;
  branch_not_starts_with?: Maybe<String>;
  branch_ends_with?: Maybe<String>;
  branch_not_ends_with?: Maybe<String>;
  commit?: Maybe<String>;
  commit_not?: Maybe<String>;
  commit_in?: Maybe<String[] | String>;
  commit_not_in?: Maybe<String[] | String>;
  commit_lt?: Maybe<String>;
  commit_lte?: Maybe<String>;
  commit_gt?: Maybe<String>;
  commit_gte?: Maybe<String>;
  commit_contains?: Maybe<String>;
  commit_not_contains?: Maybe<String>;
  commit_starts_with?: Maybe<String>;
  commit_not_starts_with?: Maybe<String>;
  commit_ends_with?: Maybe<String>;
  commit_not_ends_with?: Maybe<String>;
  renders_every?: Maybe<RenderWhereInput>;
  renders_some?: Maybe<RenderWhereInput>;
  renders_none?: Maybe<RenderWhereInput>;
  repo?: Maybe<RepoWhereInput>;
  AND?: Maybe<CheckWhereInput[] | CheckWhereInput>;
  OR?: Maybe<CheckWhereInput[] | CheckWhereInput>;
  NOT?: Maybe<CheckWhereInput[] | CheckWhereInput>;
}

export interface SampleCreateOneWithoutRendersInput {
  create?: Maybe<SampleCreateWithoutRendersInput>;
  connect?: Maybe<SampleWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  githubAccessToken?: Maybe<String>;
  figmaAccessToken?: Maybe<String>;
  figmaRefreshToken?: Maybe<String>;
  memberships?: Maybe<MembershipUpdateManyWithoutUserInput>;
}

export interface ComponentCreateOneWithoutSamplesInput {
  create?: Maybe<ComponentCreateWithoutSamplesInput>;
  connect?: Maybe<ComponentWhereUniqueInput>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TeamCreateOneWithoutComponentsInput {
  create?: Maybe<TeamCreateWithoutComponentsInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface CheckUpdateManyWithWhereNestedInput {
  where: CheckScalarWhereInput;
  data: CheckUpdateManyDataInput;
}

export interface MembershipCreateManyWithoutTeamInput {
  create?: Maybe<
    MembershipCreateWithoutTeamInput[] | MembershipCreateWithoutTeamInput
  >;
  connect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
}

export interface CheckUpdateManyDataInput {
  githubCheckId?: Maybe<Int>;
  branch?: Maybe<String>;
  commit?: Maybe<String>;
}

export interface UserCreateOneWithoutMembershipsInput {
  create?: Maybe<UserCreateWithoutMembershipsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface RepoUpsertWithWhereUniqueWithoutTeamInput {
  where: RepoWhereUniqueInput;
  update: RepoUpdateWithoutTeamDataInput;
  create: RepoCreateWithoutTeamInput;
}

export interface RepoCreateManyWithoutTeamInput {
  create?: Maybe<RepoCreateWithoutTeamInput[] | RepoCreateWithoutTeamInput>;
  connect?: Maybe<RepoWhereUniqueInput[] | RepoWhereUniqueInput>;
}

export interface RepoScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<String>;
  owner_not?: Maybe<String>;
  owner_in?: Maybe<String[] | String>;
  owner_not_in?: Maybe<String[] | String>;
  owner_lt?: Maybe<String>;
  owner_lte?: Maybe<String>;
  owner_gt?: Maybe<String>;
  owner_gte?: Maybe<String>;
  owner_contains?: Maybe<String>;
  owner_not_contains?: Maybe<String>;
  owner_starts_with?: Maybe<String>;
  owner_not_starts_with?: Maybe<String>;
  owner_ends_with?: Maybe<String>;
  owner_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<RepoScalarWhereInput[] | RepoScalarWhereInput>;
  OR?: Maybe<RepoScalarWhereInput[] | RepoScalarWhereInput>;
  NOT?: Maybe<RepoScalarWhereInput[] | RepoScalarWhereInput>;
}

export interface CheckCreateManyWithoutRepoInput {
  create?: Maybe<CheckCreateWithoutRepoInput[] | CheckCreateWithoutRepoInput>;
  connect?: Maybe<CheckWhereUniqueInput[] | CheckWhereUniqueInput>;
}

export interface RepoUpdateManyWithWhereNestedInput {
  where: RepoScalarWhereInput;
  data: RepoUpdateManyDataInput;
}

export interface RepoCreateOneWithoutChecksInput {
  create?: Maybe<RepoCreateWithoutChecksInput>;
  connect?: Maybe<RepoWhereUniqueInput>;
}

export interface RepoUpdateManyDataInput {
  owner?: Maybe<String>;
  name?: Maybe<String>;
}

export interface TeamCreateOneWithoutReposInput {
  create?: Maybe<TeamCreateWithoutReposInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface TeamUpsertWithoutComponentsInput {
  update: TeamUpdateWithoutComponentsDataInput;
  create: TeamCreateWithoutComponentsInput;
}

export interface ComponentCreateManyWithoutTeamInput {
  create?: Maybe<
    ComponentCreateWithoutTeamInput[] | ComponentCreateWithoutTeamInput
  >;
  connect?: Maybe<ComponentWhereUniqueInput[] | ComponentWhereUniqueInput>;
}

export interface ComponentUpsertWithoutSamplesInput {
  update: ComponentUpdateWithoutSamplesDataInput;
  create: ComponentCreateWithoutSamplesInput;
}

export interface SampleCreateManyWithoutComponentInput {
  create?: Maybe<
    SampleCreateWithoutComponentInput[] | SampleCreateWithoutComponentInput
  >;
  connect?: Maybe<SampleWhereUniqueInput[] | SampleWhereUniqueInput>;
}

export interface SampleUpsertWithoutRendersInput {
  update: SampleUpdateWithoutRendersDataInput;
  create: SampleCreateWithoutRendersInput;
}

export interface RenderCreateManyWithoutSampleInput {
  create?: Maybe<
    RenderCreateWithoutSampleInput[] | RenderCreateWithoutSampleInput
  >;
  connect?: Maybe<RenderWhereUniqueInput[] | RenderWhereUniqueInput>;
}

export interface RenderUpsertWithWhereUniqueWithoutCheckInput {
  where: RenderWhereUniqueInput;
  update: RenderUpdateWithoutCheckDataInput;
  create: RenderCreateWithoutCheckInput;
}

export interface TeamSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TeamWhereInput>;
  AND?: Maybe<TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput>;
  OR?: Maybe<TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput>;
  NOT?: Maybe<TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput>;
}

export interface RenderScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  html?: Maybe<String>;
  html_not?: Maybe<String>;
  html_in?: Maybe<String[] | String>;
  html_not_in?: Maybe<String[] | String>;
  html_lt?: Maybe<String>;
  html_lte?: Maybe<String>;
  html_gt?: Maybe<String>;
  html_gte?: Maybe<String>;
  html_contains?: Maybe<String>;
  html_not_contains?: Maybe<String>;
  html_starts_with?: Maybe<String>;
  html_not_starts_with?: Maybe<String>;
  html_ends_with?: Maybe<String>;
  html_not_ends_with?: Maybe<String>;
  branch?: Maybe<String>;
  branch_not?: Maybe<String>;
  branch_in?: Maybe<String[] | String>;
  branch_not_in?: Maybe<String[] | String>;
  branch_lt?: Maybe<String>;
  branch_lte?: Maybe<String>;
  branch_gt?: Maybe<String>;
  branch_gte?: Maybe<String>;
  branch_contains?: Maybe<String>;
  branch_not_contains?: Maybe<String>;
  branch_starts_with?: Maybe<String>;
  branch_not_starts_with?: Maybe<String>;
  branch_ends_with?: Maybe<String>;
  branch_not_ends_with?: Maybe<String>;
  commit?: Maybe<String>;
  commit_not?: Maybe<String>;
  commit_in?: Maybe<String[] | String>;
  commit_not_in?: Maybe<String[] | String>;
  commit_lt?: Maybe<String>;
  commit_lte?: Maybe<String>;
  commit_gt?: Maybe<String>;
  commit_gte?: Maybe<String>;
  commit_contains?: Maybe<String>;
  commit_not_contains?: Maybe<String>;
  commit_starts_with?: Maybe<String>;
  commit_not_starts_with?: Maybe<String>;
  commit_ends_with?: Maybe<String>;
  commit_not_ends_with?: Maybe<String>;
  AND?: Maybe<RenderScalarWhereInput[] | RenderScalarWhereInput>;
  OR?: Maybe<RenderScalarWhereInput[] | RenderScalarWhereInput>;
  NOT?: Maybe<RenderScalarWhereInput[] | RenderScalarWhereInput>;
}

export interface RepoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RepoWhereInput>;
  AND?: Maybe<RepoSubscriptionWhereInput[] | RepoSubscriptionWhereInput>;
  OR?: Maybe<RepoSubscriptionWhereInput[] | RepoSubscriptionWhereInput>;
  NOT?: Maybe<RepoSubscriptionWhereInput[] | RepoSubscriptionWhereInput>;
}

export interface RenderUpdateManyWithWhereNestedInput {
  where: RenderScalarWhereInput;
  data: RenderUpdateManyDataInput;
}

export interface MembershipSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MembershipWhereInput>;
  AND?: Maybe<
    MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput
  >;
  OR?: Maybe<
    MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput
  >;
  NOT?: Maybe<
    MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput
  >;
}

export interface RenderUpdateManyDataInput {
  imageUrl?: Maybe<String>;
  html?: Maybe<String>;
  branch?: Maybe<String>;
  commit?: Maybe<String>;
}

export type CliAuthSessionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RepoUpdateOneRequiredWithoutChecksInput {
  create?: Maybe<RepoCreateWithoutChecksInput>;
  update?: Maybe<RepoUpdateWithoutChecksDataInput>;
  upsert?: Maybe<RepoUpsertWithoutChecksInput>;
  connect?: Maybe<RepoWhereUniqueInput>;
}

export interface TeamUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface RepoUpdateWithoutChecksDataInput {
  owner?: Maybe<String>;
  name?: Maybe<String>;
  team?: Maybe<TeamUpdateOneWithoutReposInput>;
}

export interface SampleUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface TeamUpdateOneWithoutReposInput {
  create?: Maybe<TeamCreateWithoutReposInput>;
  update?: Maybe<TeamUpdateWithoutReposDataInput>;
  upsert?: Maybe<TeamUpsertWithoutReposInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface RepoUpdateManyMutationInput {
  owner?: Maybe<String>;
  name?: Maybe<String>;
}

export interface TeamUpdateWithoutReposDataInput {
  name?: Maybe<String>;
  memberships?: Maybe<MembershipUpdateManyWithoutTeamInput>;
  components?: Maybe<ComponentUpdateManyWithoutTeamInput>;
}

export interface RenderUpdateManyMutationInput {
  imageUrl?: Maybe<String>;
  html?: Maybe<String>;
  branch?: Maybe<String>;
  commit?: Maybe<String>;
}

export interface ComponentUpdateManyWithoutTeamInput {
  create?: Maybe<
    ComponentCreateWithoutTeamInput[] | ComponentCreateWithoutTeamInput
  >;
  delete?: Maybe<ComponentWhereUniqueInput[] | ComponentWhereUniqueInput>;
  connect?: Maybe<ComponentWhereUniqueInput[] | ComponentWhereUniqueInput>;
  set?: Maybe<ComponentWhereUniqueInput[] | ComponentWhereUniqueInput>;
  disconnect?: Maybe<ComponentWhereUniqueInput[] | ComponentWhereUniqueInput>;
  update?: Maybe<
    | ComponentUpdateWithWhereUniqueWithoutTeamInput[]
    | ComponentUpdateWithWhereUniqueWithoutTeamInput
  >;
  upsert?: Maybe<
    | ComponentUpsertWithWhereUniqueWithoutTeamInput[]
    | ComponentUpsertWithWhereUniqueWithoutTeamInput
  >;
  deleteMany?: Maybe<ComponentScalarWhereInput[] | ComponentScalarWhereInput>;
  updateMany?: Maybe<
    | ComponentUpdateManyWithWhereNestedInput[]
    | ComponentUpdateManyWithWhereNestedInput
  >;
}

export interface MembershipUpdateManyMutationInput {
  role?: Maybe<Role>;
}

export interface ComponentUpdateWithWhereUniqueWithoutTeamInput {
  where: ComponentWhereUniqueInput;
  data: ComponentUpdateWithoutTeamDataInput;
}

export interface ComponentUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ComponentUpdateWithoutTeamDataInput {
  name?: Maybe<String>;
  samples?: Maybe<SampleUpdateManyWithoutComponentInput>;
}

export interface CliAuthSessionUpdateManyMutationInput {
  expiresAt?: Maybe<DateTimeInput>;
}

export interface SampleUpdateManyWithoutComponentInput {
  create?: Maybe<
    SampleCreateWithoutComponentInput[] | SampleCreateWithoutComponentInput
  >;
  delete?: Maybe<SampleWhereUniqueInput[] | SampleWhereUniqueInput>;
  connect?: Maybe<SampleWhereUniqueInput[] | SampleWhereUniqueInput>;
  set?: Maybe<SampleWhereUniqueInput[] | SampleWhereUniqueInput>;
  disconnect?: Maybe<SampleWhereUniqueInput[] | SampleWhereUniqueInput>;
  update?: Maybe<
    | SampleUpdateWithWhereUniqueWithoutComponentInput[]
    | SampleUpdateWithWhereUniqueWithoutComponentInput
  >;
  upsert?: Maybe<
    | SampleUpsertWithWhereUniqueWithoutComponentInput[]
    | SampleUpsertWithWhereUniqueWithoutComponentInput
  >;
  deleteMany?: Maybe<SampleScalarWhereInput[] | SampleScalarWhereInput>;
  updateMany?: Maybe<
    | SampleUpdateManyWithWhereNestedInput[]
    | SampleUpdateManyWithWhereNestedInput
  >;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface SampleUpdateWithWhereUniqueWithoutComponentInput {
  where: SampleWhereUniqueInput;
  data: SampleUpdateWithoutComponentDataInput;
}

export interface MembershipUpdateWithWhereUniqueWithoutUserInput {
  where: MembershipWhereUniqueInput;
  data: MembershipUpdateWithoutUserDataInput;
}

export interface SampleUpdateWithoutComponentDataInput {
  name?: Maybe<String>;
  renders?: Maybe<RenderUpdateManyWithoutSampleInput>;
}

export interface RenderCreateWithoutCheckInput {
  id?: Maybe<ID_Input>;
  imageUrl?: Maybe<String>;
  html: String;
  branch: String;
  commit: String;
  sample: SampleCreateOneWithoutRendersInput;
}

export interface RenderUpdateManyWithoutSampleInput {
  create?: Maybe<
    RenderCreateWithoutSampleInput[] | RenderCreateWithoutSampleInput
  >;
  delete?: Maybe<RenderWhereUniqueInput[] | RenderWhereUniqueInput>;
  connect?: Maybe<RenderWhereUniqueInput[] | RenderWhereUniqueInput>;
  set?: Maybe<RenderWhereUniqueInput[] | RenderWhereUniqueInput>;
  disconnect?: Maybe<RenderWhereUniqueInput[] | RenderWhereUniqueInput>;
  update?: Maybe<
    | RenderUpdateWithWhereUniqueWithoutSampleInput[]
    | RenderUpdateWithWhereUniqueWithoutSampleInput
  >;
  upsert?: Maybe<
    | RenderUpsertWithWhereUniqueWithoutSampleInput[]
    | RenderUpsertWithWhereUniqueWithoutSampleInput
  >;
  deleteMany?: Maybe<RenderScalarWhereInput[] | RenderScalarWhereInput>;
  updateMany?: Maybe<
    | RenderUpdateManyWithWhereNestedInput[]
    | RenderUpdateManyWithWhereNestedInput
  >;
}

export interface ComponentCreateWithoutSamplesInput {
  id?: Maybe<ID_Input>;
  name: String;
  team: TeamCreateOneWithoutComponentsInput;
}

export interface RenderUpdateWithWhereUniqueWithoutSampleInput {
  where: RenderWhereUniqueInput;
  data: RenderUpdateWithoutSampleDataInput;
}

export interface MembershipCreateWithoutTeamInput {
  id?: Maybe<ID_Input>;
  role?: Maybe<Role>;
  user: UserCreateOneWithoutMembershipsInput;
}

export interface RenderUpdateWithoutSampleDataInput {
  imageUrl?: Maybe<String>;
  html?: Maybe<String>;
  branch?: Maybe<String>;
  commit?: Maybe<String>;
  check?: Maybe<CheckUpdateOneWithoutRendersInput>;
}

export interface RepoCreateWithoutTeamInput {
  id?: Maybe<ID_Input>;
  owner: String;
  name: String;
  checks?: Maybe<CheckCreateManyWithoutRepoInput>;
}

export interface CheckUpdateOneWithoutRendersInput {
  create?: Maybe<CheckCreateWithoutRendersInput>;
  update?: Maybe<CheckUpdateWithoutRendersDataInput>;
  upsert?: Maybe<CheckUpsertWithoutRendersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CheckWhereUniqueInput>;
}

export interface RepoCreateWithoutChecksInput {
  id?: Maybe<ID_Input>;
  owner: String;
  name: String;
  team?: Maybe<TeamCreateOneWithoutReposInput>;
}

export interface CheckUpdateWithoutRendersDataInput {
  githubCheckId?: Maybe<Int>;
  branch?: Maybe<String>;
  commit?: Maybe<String>;
  repo?: Maybe<RepoUpdateOneRequiredWithoutChecksInput>;
}

export interface ComponentCreateWithoutTeamInput {
  id?: Maybe<ID_Input>;
  name: String;
  samples?: Maybe<SampleCreateManyWithoutComponentInput>;
}

export interface CheckUpsertWithoutRendersInput {
  update: CheckUpdateWithoutRendersDataInput;
  create: CheckCreateWithoutRendersInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface RenderUpsertWithWhereUniqueWithoutSampleInput {
  where: RenderWhereUniqueInput;
  update: RenderUpdateWithoutSampleDataInput;
  create: RenderCreateWithoutSampleInput;
}

export interface RenderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  html?: Maybe<String>;
  html_not?: Maybe<String>;
  html_in?: Maybe<String[] | String>;
  html_not_in?: Maybe<String[] | String>;
  html_lt?: Maybe<String>;
  html_lte?: Maybe<String>;
  html_gt?: Maybe<String>;
  html_gte?: Maybe<String>;
  html_contains?: Maybe<String>;
  html_not_contains?: Maybe<String>;
  html_starts_with?: Maybe<String>;
  html_not_starts_with?: Maybe<String>;
  html_ends_with?: Maybe<String>;
  html_not_ends_with?: Maybe<String>;
  branch?: Maybe<String>;
  branch_not?: Maybe<String>;
  branch_in?: Maybe<String[] | String>;
  branch_not_in?: Maybe<String[] | String>;
  branch_lt?: Maybe<String>;
  branch_lte?: Maybe<String>;
  branch_gt?: Maybe<String>;
  branch_gte?: Maybe<String>;
  branch_contains?: Maybe<String>;
  branch_not_contains?: Maybe<String>;
  branch_starts_with?: Maybe<String>;
  branch_not_starts_with?: Maybe<String>;
  branch_ends_with?: Maybe<String>;
  branch_not_ends_with?: Maybe<String>;
  commit?: Maybe<String>;
  commit_not?: Maybe<String>;
  commit_in?: Maybe<String[] | String>;
  commit_not_in?: Maybe<String[] | String>;
  commit_lt?: Maybe<String>;
  commit_lte?: Maybe<String>;
  commit_gt?: Maybe<String>;
  commit_gte?: Maybe<String>;
  commit_contains?: Maybe<String>;
  commit_not_contains?: Maybe<String>;
  commit_starts_with?: Maybe<String>;
  commit_not_starts_with?: Maybe<String>;
  commit_ends_with?: Maybe<String>;
  commit_not_ends_with?: Maybe<String>;
  sample?: Maybe<SampleWhereInput>;
  check?: Maybe<CheckWhereInput>;
  AND?: Maybe<RenderWhereInput[] | RenderWhereInput>;
  OR?: Maybe<RenderWhereInput[] | RenderWhereInput>;
  NOT?: Maybe<RenderWhereInput[] | RenderWhereInput>;
}

export interface SampleUpsertWithWhereUniqueWithoutComponentInput {
  where: SampleWhereUniqueInput;
  update: SampleUpdateWithoutComponentDataInput;
  create: SampleCreateWithoutComponentInput;
}

export interface CliAuthSessionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  expiresAt?: Maybe<DateTimeInput>;
  expiresAt_not?: Maybe<DateTimeInput>;
  expiresAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiresAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiresAt_lt?: Maybe<DateTimeInput>;
  expiresAt_lte?: Maybe<DateTimeInput>;
  expiresAt_gt?: Maybe<DateTimeInput>;
  expiresAt_gte?: Maybe<DateTimeInput>;
  authenticatedUser?: Maybe<UserWhereInput>;
  AND?: Maybe<CliAuthSessionWhereInput[] | CliAuthSessionWhereInput>;
  OR?: Maybe<CliAuthSessionWhereInput[] | CliAuthSessionWhereInput>;
  NOT?: Maybe<CliAuthSessionWhereInput[] | CliAuthSessionWhereInput>;
}

export interface SampleScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<SampleScalarWhereInput[] | SampleScalarWhereInput>;
  OR?: Maybe<SampleScalarWhereInput[] | SampleScalarWhereInput>;
  NOT?: Maybe<SampleScalarWhereInput[] | SampleScalarWhereInput>;
}

export interface SampleCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  component: ComponentCreateOneWithoutSamplesInput;
  renders?: Maybe<RenderCreateManyWithoutSampleInput>;
}

export interface SampleUpdateManyWithWhereNestedInput {
  where: SampleScalarWhereInput;
  data: SampleUpdateManyDataInput;
}

export interface RenderCreateInput {
  id?: Maybe<ID_Input>;
  imageUrl?: Maybe<String>;
  html: String;
  branch: String;
  commit: String;
  sample: SampleCreateOneWithoutRendersInput;
  check?: Maybe<CheckCreateOneWithoutRendersInput>;
}

export interface SampleUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface ComponentCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  team: TeamCreateOneWithoutComponentsInput;
  samples?: Maybe<SampleCreateManyWithoutComponentInput>;
}

export interface ComponentUpsertWithWhereUniqueWithoutTeamInput {
  where: ComponentWhereUniqueInput;
  update: ComponentUpdateWithoutTeamDataInput;
  create: ComponentCreateWithoutTeamInput;
}

export interface TeamUpdateOneRequiredWithoutMembershipsInput {
  create?: Maybe<TeamCreateWithoutMembershipsInput>;
  update?: Maybe<TeamUpdateWithoutMembershipsDataInput>;
  upsert?: Maybe<TeamUpsertWithoutMembershipsInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface ComponentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ComponentScalarWhereInput[] | ComponentScalarWhereInput>;
  OR?: Maybe<ComponentScalarWhereInput[] | ComponentScalarWhereInput>;
  NOT?: Maybe<ComponentScalarWhereInput[] | ComponentScalarWhereInput>;
}

export interface SampleCreateWithoutRendersInput {
  id?: Maybe<ID_Input>;
  name: String;
  component: ComponentCreateOneWithoutSamplesInput;
}

export interface ComponentUpdateManyWithWhereNestedInput {
  where: ComponentScalarWhereInput;
  data: ComponentUpdateManyDataInput;
}

export interface UserCreateWithoutMembershipsInput {
  id?: Maybe<ID_Input>;
  email: String;
  name: String;
  githubAccessToken?: Maybe<String>;
  figmaAccessToken?: Maybe<String>;
  figmaRefreshToken?: Maybe<String>;
}

export interface ComponentUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface TeamCreateWithoutReposInput {
  id?: Maybe<ID_Input>;
  name: String;
  memberships?: Maybe<MembershipCreateManyWithoutTeamInput>;
  components?: Maybe<ComponentCreateManyWithoutTeamInput>;
}

export interface TeamUpsertWithoutReposInput {
  update: TeamUpdateWithoutReposDataInput;
  create: TeamCreateWithoutReposInput;
}

export interface TeamWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  memberships_every?: Maybe<MembershipWhereInput>;
  memberships_some?: Maybe<MembershipWhereInput>;
  memberships_none?: Maybe<MembershipWhereInput>;
  components_every?: Maybe<ComponentWhereInput>;
  components_some?: Maybe<ComponentWhereInput>;
  components_none?: Maybe<ComponentWhereInput>;
  repos_every?: Maybe<RepoWhereInput>;
  repos_some?: Maybe<RepoWhereInput>;
  repos_none?: Maybe<RepoWhereInput>;
  AND?: Maybe<TeamWhereInput[] | TeamWhereInput>;
  OR?: Maybe<TeamWhereInput[] | TeamWhereInput>;
  NOT?: Maybe<TeamWhereInput[] | TeamWhereInput>;
}

export interface RepoUpsertWithoutChecksInput {
  update: RepoUpdateWithoutChecksDataInput;
  create: RepoCreateWithoutChecksInput;
}

export interface TeamCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  memberships?: Maybe<MembershipCreateManyWithoutTeamInput>;
  components?: Maybe<ComponentCreateManyWithoutTeamInput>;
  repos?: Maybe<RepoCreateManyWithoutTeamInput>;
}

export interface CheckUpdateManyMutationInput {
  githubCheckId?: Maybe<Int>;
  branch?: Maybe<String>;
  commit?: Maybe<String>;
}

export interface MembershipCreateInput {
  id?: Maybe<ID_Input>;
  role?: Maybe<Role>;
  user: UserCreateOneWithoutMembershipsInput;
  team: TeamCreateOneWithoutMembershipsInput;
}

export interface CliAuthSessionUpdateInput {
  expiresAt?: Maybe<DateTimeInput>;
  authenticatedUser?: Maybe<UserUpdateOneInput>;
}

export interface CheckCreateInput {
  id?: Maybe<ID_Input>;
  githubCheckId?: Maybe<Int>;
  branch: String;
  commit: String;
  renders?: Maybe<RenderCreateManyWithoutCheckInput>;
  repo: RepoCreateOneWithoutChecksInput;
}

export interface TeamCreateWithoutMembershipsInput {
  id?: Maybe<ID_Input>;
  name: String;
  components?: Maybe<ComponentCreateManyWithoutTeamInput>;
  repos?: Maybe<RepoCreateManyWithoutTeamInput>;
}

export interface CheckCreateWithoutRepoInput {
  id?: Maybe<ID_Input>;
  githubCheckId?: Maybe<Int>;
  branch: String;
  commit: String;
  renders?: Maybe<RenderCreateManyWithoutCheckInput>;
}

export interface CliAuthSessionCreateInput {
  id?: Maybe<ID_Input>;
  expiresAt: DateTimeInput;
  authenticatedUser?: Maybe<UserCreateOneInput>;
}

export interface CliAuthSessionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CliAuthSessionWhereInput>;
  AND?: Maybe<
    | CliAuthSessionSubscriptionWhereInput[]
    | CliAuthSessionSubscriptionWhereInput
  >;
  OR?: Maybe<
    | CliAuthSessionSubscriptionWhereInput[]
    | CliAuthSessionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | CliAuthSessionSubscriptionWhereInput[]
    | CliAuthSessionSubscriptionWhereInput
  >;
}

export interface MembershipCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  role?: Maybe<Role>;
  team: TeamCreateOneWithoutMembershipsInput;
}

export interface MembershipCreateManyWithoutUserInput {
  create?: Maybe<
    MembershipCreateWithoutUserInput[] | MembershipCreateWithoutUserInput
  >;
  connect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  name: String;
  githubAccessToken?: Maybe<String>;
  figmaAccessToken?: Maybe<String>;
  figmaRefreshToken?: Maybe<String>;
  memberships?: Maybe<MembershipCreateManyWithoutUserInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface RepoCreateInput {
  id?: Maybe<ID_Input>;
  owner: String;
  name: String;
  checks?: Maybe<CheckCreateManyWithoutRepoInput>;
  team?: Maybe<TeamCreateOneWithoutReposInput>;
}

export interface SampleCreateWithoutComponentInput {
  id?: Maybe<ID_Input>;
  name: String;
  renders?: Maybe<RenderCreateManyWithoutSampleInput>;
}

export interface TeamCreateWithoutComponentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  memberships?: Maybe<MembershipCreateManyWithoutTeamInput>;
  repos?: Maybe<RepoCreateManyWithoutTeamInput>;
}

export interface MembershipUpsertWithWhereUniqueWithoutUserInput {
  where: MembershipWhereUniqueInput;
  update: MembershipUpdateWithoutUserDataInput;
  create: MembershipCreateWithoutUserInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  name: String;
  githubAccessToken?: String;
  figmaAccessToken?: String;
  figmaRefreshToken?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  githubAccessToken: () => Promise<String>;
  figmaAccessToken: () => Promise<String>;
  figmaRefreshToken: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  githubAccessToken: () => Promise<AsyncIterator<String>>;
  figmaAccessToken: () => Promise<AsyncIterator<String>>;
  figmaRefreshToken: () => Promise<AsyncIterator<String>>;
}

export interface CliAuthSessionConnection {
  pageInfo: PageInfo;
  edges: CliAuthSessionEdge[];
}

export interface CliAuthSessionConnectionPromise
  extends Promise<CliAuthSessionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CliAuthSessionEdge>>() => T;
  aggregate: <T = AggregateCliAuthSessionPromise>() => T;
}

export interface CliAuthSessionConnectionSubscription
  extends Promise<AsyncIterator<CliAuthSessionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CliAuthSessionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCliAuthSessionSubscription>() => T;
}

export interface Sample {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface SamplePromise extends Promise<Sample>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  component: <T = ComponentPromise>() => T;
  renders: <T = FragmentableArray<Render>>(args?: {
    where?: RenderWhereInput;
    orderBy?: RenderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SampleSubscription
  extends Promise<AsyncIterator<Sample>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  component: <T = ComponentSubscription>() => T;
  renders: <T = Promise<AsyncIterator<RenderSubscription>>>(args?: {
    where?: RenderWhereInput;
    orderBy?: RenderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SampleNullablePromise
  extends Promise<Sample | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  component: <T = ComponentPromise>() => T;
  renders: <T = FragmentableArray<Render>>(args?: {
    where?: RenderWhereInput;
    orderBy?: RenderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CliAuthSessionEdge {
  node: CliAuthSession;
  cursor: String;
}

export interface CliAuthSessionEdgePromise
  extends Promise<CliAuthSessionEdge>,
    Fragmentable {
  node: <T = CliAuthSessionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CliAuthSessionEdgeSubscription
  extends Promise<AsyncIterator<CliAuthSessionEdge>>,
    Fragmentable {
  node: <T = CliAuthSessionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Membership {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  role: Role;
}

export interface MembershipPromise extends Promise<Membership>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
  user: <T = UserPromise>() => T;
  team: <T = TeamPromise>() => T;
}

export interface MembershipSubscription
  extends Promise<AsyncIterator<Membership>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
  user: <T = UserSubscription>() => T;
  team: <T = TeamSubscription>() => T;
}

export interface MembershipNullablePromise
  extends Promise<Membership | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
  user: <T = UserPromise>() => T;
  team: <T = TeamPromise>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Component {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface ComponentPromise extends Promise<Component>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  team: <T = TeamPromise>() => T;
  samples: <T = FragmentableArray<Sample>>(args?: {
    where?: SampleWhereInput;
    orderBy?: SampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ComponentSubscription
  extends Promise<AsyncIterator<Component>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  team: <T = TeamSubscription>() => T;
  samples: <T = Promise<AsyncIterator<SampleSubscription>>>(args?: {
    where?: SampleWhereInput;
    orderBy?: SampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ComponentNullablePromise
  extends Promise<Component | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  team: <T = TeamPromise>() => T;
  samples: <T = FragmentableArray<Sample>>(args?: {
    where?: SampleWhereInput;
    orderBy?: SampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Render {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  imageUrl?: String;
  html: String;
  branch: String;
  commit: String;
}

export interface RenderPromise extends Promise<Render>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  imageUrl: () => Promise<String>;
  html: () => Promise<String>;
  branch: () => Promise<String>;
  commit: () => Promise<String>;
  sample: <T = SamplePromise>() => T;
  check: <T = CheckPromise>() => T;
}

export interface RenderSubscription
  extends Promise<AsyncIterator<Render>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  html: () => Promise<AsyncIterator<String>>;
  branch: () => Promise<AsyncIterator<String>>;
  commit: () => Promise<AsyncIterator<String>>;
  sample: <T = SampleSubscription>() => T;
  check: <T = CheckSubscription>() => T;
}

export interface RenderNullablePromise
  extends Promise<Render | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  imageUrl: () => Promise<String>;
  html: () => Promise<String>;
  branch: () => Promise<String>;
  commit: () => Promise<String>;
  sample: <T = SamplePromise>() => T;
  check: <T = CheckPromise>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CliAuthSession {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  expiresAt: DateTimeOutput;
}

export interface CliAuthSessionPromise
  extends Promise<CliAuthSession>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  expiresAt: () => Promise<DateTimeOutput>;
  authenticatedUser: <T = UserPromise>() => T;
}

export interface CliAuthSessionSubscription
  extends Promise<AsyncIterator<CliAuthSession>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  expiresAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  authenticatedUser: <T = UserSubscription>() => T;
}

export interface CliAuthSessionNullablePromise
  extends Promise<CliAuthSession | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  expiresAt: () => Promise<DateTimeOutput>;
  authenticatedUser: <T = UserPromise>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateCheck {
  count: Int;
}

export interface AggregateCheckPromise
  extends Promise<AggregateCheck>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCheckSubscription
  extends Promise<AsyncIterator<AggregateCheck>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateTeam {
  count: Int;
}

export interface AggregateTeamPromise
  extends Promise<AggregateTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeamSubscription
  extends Promise<AsyncIterator<AggregateTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TeamPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface TeamPreviousValuesPromise
  extends Promise<TeamPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface TeamPreviousValuesSubscription
  extends Promise<AsyncIterator<TeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface TeamConnection {
  pageInfo: PageInfo;
  edges: TeamEdge[];
}

export interface TeamConnectionPromise
  extends Promise<TeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TeamEdge>>() => T;
  aggregate: <T = AggregateTeamPromise>() => T;
}

export interface TeamConnectionSubscription
  extends Promise<AsyncIterator<TeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeamSubscription>() => T;
}

export interface CheckSubscriptionPayload {
  mutation: MutationType;
  node: Check;
  updatedFields: String[];
  previousValues: CheckPreviousValues;
}

export interface CheckSubscriptionPayloadPromise
  extends Promise<CheckSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CheckPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CheckPreviousValuesPromise>() => T;
}

export interface CheckSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CheckSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CheckSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CheckPreviousValuesSubscription>() => T;
}

export interface AggregateSample {
  count: Int;
}

export interface AggregateSamplePromise
  extends Promise<AggregateSample>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSampleSubscription
  extends Promise<AsyncIterator<AggregateSample>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CheckPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  githubCheckId?: Int;
  branch: String;
  commit: String;
}

export interface CheckPreviousValuesPromise
  extends Promise<CheckPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  githubCheckId: () => Promise<Int>;
  branch: () => Promise<String>;
  commit: () => Promise<String>;
}

export interface CheckPreviousValuesSubscription
  extends Promise<AsyncIterator<CheckPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  githubCheckId: () => Promise<AsyncIterator<Int>>;
  branch: () => Promise<AsyncIterator<String>>;
  commit: () => Promise<AsyncIterator<String>>;
}

export interface SampleConnection {
  pageInfo: PageInfo;
  edges: SampleEdge[];
}

export interface SampleConnectionPromise
  extends Promise<SampleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SampleEdge>>() => T;
  aggregate: <T = AggregateSamplePromise>() => T;
}

export interface SampleConnectionSubscription
  extends Promise<AsyncIterator<SampleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SampleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSampleSubscription>() => T;
}

export interface CheckEdge {
  node: Check;
  cursor: String;
}

export interface CheckEdgePromise extends Promise<CheckEdge>, Fragmentable {
  node: <T = CheckPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CheckEdgeSubscription
  extends Promise<AsyncIterator<CheckEdge>>,
    Fragmentable {
  node: <T = CheckSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RepoEdge {
  node: Repo;
  cursor: String;
}

export interface RepoEdgePromise extends Promise<RepoEdge>, Fragmentable {
  node: <T = RepoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RepoEdgeSubscription
  extends Promise<AsyncIterator<RepoEdge>>,
    Fragmentable {
  node: <T = RepoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CliAuthSessionSubscriptionPayload {
  mutation: MutationType;
  node: CliAuthSession;
  updatedFields: String[];
  previousValues: CliAuthSessionPreviousValues;
}

export interface CliAuthSessionSubscriptionPayloadPromise
  extends Promise<CliAuthSessionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CliAuthSessionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CliAuthSessionPreviousValuesPromise>() => T;
}

export interface CliAuthSessionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CliAuthSessionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CliAuthSessionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CliAuthSessionPreviousValuesSubscription>() => T;
}

export interface AggregateRender {
  count: Int;
}

export interface AggregateRenderPromise
  extends Promise<AggregateRender>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRenderSubscription
  extends Promise<AsyncIterator<AggregateRender>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CliAuthSessionPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  expiresAt: DateTimeOutput;
}

export interface CliAuthSessionPreviousValuesPromise
  extends Promise<CliAuthSessionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  expiresAt: () => Promise<DateTimeOutput>;
}

export interface CliAuthSessionPreviousValuesSubscription
  extends Promise<AsyncIterator<CliAuthSessionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  expiresAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RenderConnection {
  pageInfo: PageInfo;
  edges: RenderEdge[];
}

export interface RenderConnectionPromise
  extends Promise<RenderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RenderEdge>>() => T;
  aggregate: <T = AggregateRenderPromise>() => T;
}

export interface RenderConnectionSubscription
  extends Promise<AsyncIterator<RenderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RenderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRenderSubscription>() => T;
}

export interface TeamSubscriptionPayload {
  mutation: MutationType;
  node: Team;
  updatedFields: String[];
  previousValues: TeamPreviousValues;
}

export interface TeamSubscriptionPayloadPromise
  extends Promise<TeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TeamPreviousValuesPromise>() => T;
}

export interface TeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TeamPreviousValuesSubscription>() => T;
}

export interface MembershipEdge {
  node: Membership;
  cursor: String;
}

export interface MembershipEdgePromise
  extends Promise<MembershipEdge>,
    Fragmentable {
  node: <T = MembershipPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MembershipEdgeSubscription
  extends Promise<AsyncIterator<MembershipEdge>>,
    Fragmentable {
  node: <T = MembershipSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ComponentSubscriptionPayload {
  mutation: MutationType;
  node: Component;
  updatedFields: String[];
  previousValues: ComponentPreviousValues;
}

export interface ComponentSubscriptionPayloadPromise
  extends Promise<ComponentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ComponentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ComponentPreviousValuesPromise>() => T;
}

export interface ComponentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ComponentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ComponentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ComponentPreviousValuesSubscription>() => T;
}

export interface AggregateComponent {
  count: Int;
}

export interface AggregateComponentPromise
  extends Promise<AggregateComponent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateComponentSubscription
  extends Promise<AsyncIterator<AggregateComponent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ComponentPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface ComponentPreviousValuesPromise
  extends Promise<ComponentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface ComponentPreviousValuesSubscription
  extends Promise<AsyncIterator<ComponentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ComponentConnection {
  pageInfo: PageInfo;
  edges: ComponentEdge[];
}

export interface ComponentConnectionPromise
  extends Promise<ComponentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ComponentEdge>>() => T;
  aggregate: <T = AggregateComponentPromise>() => T;
}

export interface ComponentConnectionSubscription
  extends Promise<AsyncIterator<ComponentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ComponentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateComponentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface MembershipSubscriptionPayload {
  mutation: MutationType;
  node: Membership;
  updatedFields: String[];
  previousValues: MembershipPreviousValues;
}

export interface MembershipSubscriptionPayloadPromise
  extends Promise<MembershipSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MembershipPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MembershipPreviousValuesPromise>() => T;
}

export interface MembershipSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MembershipSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MembershipSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MembershipPreviousValuesSubscription>() => T;
}

export interface Check {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  githubCheckId?: Int;
  branch: String;
  commit: String;
}

export interface CheckPromise extends Promise<Check>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  githubCheckId: () => Promise<Int>;
  branch: () => Promise<String>;
  commit: () => Promise<String>;
  renders: <T = FragmentableArray<Render>>(args?: {
    where?: RenderWhereInput;
    orderBy?: RenderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repo: <T = RepoPromise>() => T;
}

export interface CheckSubscription
  extends Promise<AsyncIterator<Check>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  githubCheckId: () => Promise<AsyncIterator<Int>>;
  branch: () => Promise<AsyncIterator<String>>;
  commit: () => Promise<AsyncIterator<String>>;
  renders: <T = Promise<AsyncIterator<RenderSubscription>>>(args?: {
    where?: RenderWhereInput;
    orderBy?: RenderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repo: <T = RepoSubscription>() => T;
}

export interface CheckNullablePromise
  extends Promise<Check | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  githubCheckId: () => Promise<Int>;
  branch: () => Promise<String>;
  commit: () => Promise<String>;
  renders: <T = FragmentableArray<Render>>(args?: {
    where?: RenderWhereInput;
    orderBy?: RenderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repo: <T = RepoPromise>() => T;
}

export interface MembershipPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  role: Role;
}

export interface MembershipPreviousValuesPromise
  extends Promise<MembershipPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
}

export interface MembershipPreviousValuesSubscription
  extends Promise<AsyncIterator<MembershipPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface Team {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface TeamPromise extends Promise<Team>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  memberships: <T = FragmentableArray<Membership>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  components: <T = FragmentableArray<Component>>(args?: {
    where?: ComponentWhereInput;
    orderBy?: ComponentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repos: <T = FragmentableArray<Repo>>(args?: {
    where?: RepoWhereInput;
    orderBy?: RepoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TeamSubscription
  extends Promise<AsyncIterator<Team>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  memberships: <T = Promise<AsyncIterator<MembershipSubscription>>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  components: <T = Promise<AsyncIterator<ComponentSubscription>>>(args?: {
    where?: ComponentWhereInput;
    orderBy?: ComponentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repos: <T = Promise<AsyncIterator<RepoSubscription>>>(args?: {
    where?: RepoWhereInput;
    orderBy?: RepoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TeamNullablePromise
  extends Promise<Team | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  memberships: <T = FragmentableArray<Membership>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  components: <T = FragmentableArray<Component>>(args?: {
    where?: ComponentWhereInput;
    orderBy?: ComponentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repos: <T = FragmentableArray<Repo>>(args?: {
    where?: RepoWhereInput;
    orderBy?: RepoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CheckConnection {
  pageInfo: PageInfo;
  edges: CheckEdge[];
}

export interface CheckConnectionPromise
  extends Promise<CheckConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CheckEdge>>() => T;
  aggregate: <T = AggregateCheckPromise>() => T;
}

export interface CheckConnectionSubscription
  extends Promise<AsyncIterator<CheckConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CheckEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCheckSubscription>() => T;
}

export interface AggregateRepo {
  count: Int;
}

export interface AggregateRepoPromise
  extends Promise<AggregateRepo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRepoSubscription
  extends Promise<AsyncIterator<AggregateRepo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RenderSubscriptionPayload {
  mutation: MutationType;
  node: Render;
  updatedFields: String[];
  previousValues: RenderPreviousValues;
}

export interface RenderSubscriptionPayloadPromise
  extends Promise<RenderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RenderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RenderPreviousValuesPromise>() => T;
}

export interface RenderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RenderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RenderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RenderPreviousValuesSubscription>() => T;
}

export interface RenderEdge {
  node: Render;
  cursor: String;
}

export interface RenderEdgePromise extends Promise<RenderEdge>, Fragmentable {
  node: <T = RenderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RenderEdgeSubscription
  extends Promise<AsyncIterator<RenderEdge>>,
    Fragmentable {
  node: <T = RenderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RenderPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  imageUrl?: String;
  html: String;
  branch: String;
  commit: String;
}

export interface RenderPreviousValuesPromise
  extends Promise<RenderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  imageUrl: () => Promise<String>;
  html: () => Promise<String>;
  branch: () => Promise<String>;
  commit: () => Promise<String>;
}

export interface RenderPreviousValuesSubscription
  extends Promise<AsyncIterator<RenderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  html: () => Promise<AsyncIterator<String>>;
  branch: () => Promise<AsyncIterator<String>>;
  commit: () => Promise<AsyncIterator<String>>;
}

export interface MembershipConnection {
  pageInfo: PageInfo;
  edges: MembershipEdge[];
}

export interface MembershipConnectionPromise
  extends Promise<MembershipConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MembershipEdge>>() => T;
  aggregate: <T = AggregateMembershipPromise>() => T;
}

export interface MembershipConnectionSubscription
  extends Promise<AsyncIterator<MembershipConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MembershipEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMembershipSubscription>() => T;
}

export interface Repo {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  owner: String;
  name: String;
}

export interface RepoPromise extends Promise<Repo>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: () => Promise<String>;
  name: () => Promise<String>;
  checks: <T = FragmentableArray<Check>>(args?: {
    where?: CheckWhereInput;
    orderBy?: CheckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  team: <T = TeamPromise>() => T;
}

export interface RepoSubscription
  extends Promise<AsyncIterator<Repo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  checks: <T = Promise<AsyncIterator<CheckSubscription>>>(args?: {
    where?: CheckWhereInput;
    orderBy?: CheckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  team: <T = TeamSubscription>() => T;
}

export interface RepoNullablePromise
  extends Promise<Repo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: () => Promise<String>;
  name: () => Promise<String>;
  checks: <T = FragmentableArray<Check>>(args?: {
    where?: CheckWhereInput;
    orderBy?: CheckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  team: <T = TeamPromise>() => T;
}

export interface AggregateCliAuthSession {
  count: Int;
}

export interface AggregateCliAuthSessionPromise
  extends Promise<AggregateCliAuthSession>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCliAuthSessionSubscription
  extends Promise<AsyncIterator<AggregateCliAuthSession>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RepoSubscriptionPayload {
  mutation: MutationType;
  node: Repo;
  updatedFields: String[];
  previousValues: RepoPreviousValues;
}

export interface RepoSubscriptionPayloadPromise
  extends Promise<RepoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RepoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RepoPreviousValuesPromise>() => T;
}

export interface RepoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RepoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RepoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RepoPreviousValuesSubscription>() => T;
}

export interface TeamEdge {
  node: Team;
  cursor: String;
}

export interface TeamEdgePromise extends Promise<TeamEdge>, Fragmentable {
  node: <T = TeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TeamEdgeSubscription
  extends Promise<AsyncIterator<TeamEdge>>,
    Fragmentable {
  node: <T = TeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RepoConnection {
  pageInfo: PageInfo;
  edges: RepoEdge[];
}

export interface RepoConnectionPromise
  extends Promise<RepoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RepoEdge>>() => T;
  aggregate: <T = AggregateRepoPromise>() => T;
}

export interface RepoConnectionSubscription
  extends Promise<AsyncIterator<RepoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RepoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRepoSubscription>() => T;
}

export interface SamplePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface SamplePreviousValuesPromise
  extends Promise<SamplePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface SamplePreviousValuesSubscription
  extends Promise<AsyncIterator<SamplePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface SampleSubscriptionPayload {
  mutation: MutationType;
  node: Sample;
  updatedFields: String[];
  previousValues: SamplePreviousValues;
}

export interface SampleSubscriptionPayloadPromise
  extends Promise<SampleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SamplePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SamplePreviousValuesPromise>() => T;
}

export interface SampleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SampleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SampleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SamplePreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  name: String;
  githubAccessToken?: String;
  figmaAccessToken?: String;
  figmaRefreshToken?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  githubAccessToken: () => Promise<String>;
  figmaAccessToken: () => Promise<String>;
  figmaRefreshToken: () => Promise<String>;
  memberships: <T = FragmentableArray<Membership>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  githubAccessToken: () => Promise<AsyncIterator<String>>;
  figmaAccessToken: () => Promise<AsyncIterator<String>>;
  figmaRefreshToken: () => Promise<AsyncIterator<String>>;
  memberships: <T = Promise<AsyncIterator<MembershipSubscription>>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  githubAccessToken: () => Promise<String>;
  figmaAccessToken: () => Promise<String>;
  figmaRefreshToken: () => Promise<String>;
  memberships: <T = FragmentableArray<Membership>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RepoPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  owner: String;
  name: String;
}

export interface RepoPreviousValuesPromise
  extends Promise<RepoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: () => Promise<String>;
  name: () => Promise<String>;
}

export interface RepoPreviousValuesSubscription
  extends Promise<AsyncIterator<RepoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMembership {
  count: Int;
}

export interface AggregateMembershipPromise
  extends Promise<AggregateMembership>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMembershipSubscription
  extends Promise<AsyncIterator<AggregateMembership>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SampleEdge {
  node: Sample;
  cursor: String;
}

export interface SampleEdgePromise extends Promise<SampleEdge>, Fragmentable {
  node: <T = SamplePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SampleEdgeSubscription
  extends Promise<AsyncIterator<SampleEdge>>,
    Fragmentable {
  node: <T = SampleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ComponentEdge {
  node: Component;
  cursor: String;
}

export interface ComponentEdgePromise
  extends Promise<ComponentEdge>,
    Fragmentable {
  node: <T = ComponentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ComponentEdgeSubscription
  extends Promise<AsyncIterator<ComponentEdge>>,
    Fragmentable {
  node: <T = ComponentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Membership",
    embedded: false
  },
  {
    name: "Team",
    embedded: false
  },
  {
    name: "Component",
    embedded: false
  },
  {
    name: "Sample",
    embedded: false
  },
  {
    name: "Render",
    embedded: false
  },
  {
    name: "Check",
    embedded: false
  },
  {
    name: "Repo",
    embedded: false
  },
  {
    name: "CliAuthSession",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
